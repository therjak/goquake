// SPDX-License-Identifier: GPL-2.0-or-later

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: server_message.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Coord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Coord) Reset() {
	*x = Coord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coord) ProtoMessage() {}

func (x *Coord) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coord.ProtoReflect.Descriptor instead.
func (*Coord) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{0}
}

func (x *Coord) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coord) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Coord) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type IntCoord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *IntCoord) Reset() {
	*x = IntCoord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntCoord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntCoord) ProtoMessage() {}

func (x *IntCoord) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntCoord.ProtoReflect.Descriptor instead.
func (*IntCoord) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{1}
}

func (x *IntCoord) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *IntCoord) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *IntCoord) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity int32  `protobuf:"varint,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Start  *Coord `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End    *Coord `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Line) Reset() {
	*x = Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{2}
}

func (x *Line) GetEntity() int32 {
	if x != nil {
		return x.Entity
	}
	return 0
}

func (x *Line) GetStart() *Coord {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Line) GetEnd() *Coord {
	if x != nil {
		return x.End
	}
	return nil
}

type Explosion2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position   *Coord `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	StartColor int32  `protobuf:"varint,2,opt,name=start_color,json=startColor,proto3" json:"start_color,omitempty"`
	StopColor  int32  `protobuf:"varint,3,opt,name=stop_color,json=stopColor,proto3" json:"stop_color,omitempty"`
}

func (x *Explosion2) Reset() {
	*x = Explosion2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Explosion2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Explosion2) ProtoMessage() {}

func (x *Explosion2) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Explosion2.ProtoReflect.Descriptor instead.
func (*Explosion2) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{3}
}

func (x *Explosion2) GetPosition() *Coord {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Explosion2) GetStartColor() int32 {
	if x != nil {
		return x.StartColor
	}
	return 0
}

func (x *Explosion2) GetStopColor() int32 {
	if x != nil {
		return x.StopColor
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{4}
}

type TempEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//	*TempEntity_Spike
	//	*TempEntity_SuperSpike
	//	*TempEntity_Gunshot
	//	*TempEntity_Explosion
	//	*TempEntity_TarExplosion
	//	*TempEntity_Lightning1
	//	*TempEntity_Lightning2
	//	*TempEntity_WizSpike
	//	*TempEntity_KnightSpike
	//	*TempEntity_Lightning3
	//	*TempEntity_LavaSplash
	//	*TempEntity_Teleport
	//	*TempEntity_Explosion2
	//	*TempEntity_Beam
	Union isTempEntity_Union `protobuf_oneof:"union"`
}

func (x *TempEntity) Reset() {
	*x = TempEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempEntity) ProtoMessage() {}

func (x *TempEntity) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempEntity.ProtoReflect.Descriptor instead.
func (*TempEntity) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{5}
}

func (m *TempEntity) GetUnion() isTempEntity_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *TempEntity) GetSpike() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_Spike); ok {
		return x.Spike
	}
	return nil
}

func (x *TempEntity) GetSuperSpike() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_SuperSpike); ok {
		return x.SuperSpike
	}
	return nil
}

func (x *TempEntity) GetGunshot() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_Gunshot); ok {
		return x.Gunshot
	}
	return nil
}

func (x *TempEntity) GetExplosion() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_Explosion); ok {
		return x.Explosion
	}
	return nil
}

func (x *TempEntity) GetTarExplosion() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_TarExplosion); ok {
		return x.TarExplosion
	}
	return nil
}

func (x *TempEntity) GetLightning1() *Line {
	if x, ok := x.GetUnion().(*TempEntity_Lightning1); ok {
		return x.Lightning1
	}
	return nil
}

func (x *TempEntity) GetLightning2() *Line {
	if x, ok := x.GetUnion().(*TempEntity_Lightning2); ok {
		return x.Lightning2
	}
	return nil
}

func (x *TempEntity) GetWizSpike() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_WizSpike); ok {
		return x.WizSpike
	}
	return nil
}

func (x *TempEntity) GetKnightSpike() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_KnightSpike); ok {
		return x.KnightSpike
	}
	return nil
}

func (x *TempEntity) GetLightning3() *Line {
	if x, ok := x.GetUnion().(*TempEntity_Lightning3); ok {
		return x.Lightning3
	}
	return nil
}

func (x *TempEntity) GetLavaSplash() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_LavaSplash); ok {
		return x.LavaSplash
	}
	return nil
}

func (x *TempEntity) GetTeleport() *Coord {
	if x, ok := x.GetUnion().(*TempEntity_Teleport); ok {
		return x.Teleport
	}
	return nil
}

func (x *TempEntity) GetExplosion2() *Explosion2 {
	if x, ok := x.GetUnion().(*TempEntity_Explosion2); ok {
		return x.Explosion2
	}
	return nil
}

func (x *TempEntity) GetBeam() *Line {
	if x, ok := x.GetUnion().(*TempEntity_Beam); ok {
		return x.Beam
	}
	return nil
}

type isTempEntity_Union interface {
	isTempEntity_Union()
}

type TempEntity_Spike struct {
	Spike *Coord `protobuf:"bytes,1,opt,name=spike,proto3,oneof"`
}

type TempEntity_SuperSpike struct {
	SuperSpike *Coord `protobuf:"bytes,2,opt,name=super_spike,json=superSpike,proto3,oneof"`
}

type TempEntity_Gunshot struct {
	Gunshot *Coord `protobuf:"bytes,3,opt,name=gunshot,proto3,oneof"`
}

type TempEntity_Explosion struct {
	Explosion *Coord `protobuf:"bytes,4,opt,name=explosion,proto3,oneof"`
}

type TempEntity_TarExplosion struct {
	TarExplosion *Coord `protobuf:"bytes,5,opt,name=tar_explosion,json=tarExplosion,proto3,oneof"`
}

type TempEntity_Lightning1 struct {
	Lightning1 *Line `protobuf:"bytes,6,opt,name=lightning1,proto3,oneof"`
}

type TempEntity_Lightning2 struct {
	Lightning2 *Line `protobuf:"bytes,7,opt,name=lightning2,proto3,oneof"`
}

type TempEntity_WizSpike struct {
	WizSpike *Coord `protobuf:"bytes,8,opt,name=wiz_spike,json=wizSpike,proto3,oneof"`
}

type TempEntity_KnightSpike struct {
	KnightSpike *Coord `protobuf:"bytes,9,opt,name=knight_spike,json=knightSpike,proto3,oneof"`
}

type TempEntity_Lightning3 struct {
	Lightning3 *Line `protobuf:"bytes,10,opt,name=lightning3,proto3,oneof"`
}

type TempEntity_LavaSplash struct {
	LavaSplash *Coord `protobuf:"bytes,11,opt,name=lava_splash,json=lavaSplash,proto3,oneof"`
}

type TempEntity_Teleport struct {
	Teleport *Coord `protobuf:"bytes,12,opt,name=teleport,proto3,oneof"`
}

type TempEntity_Explosion2 struct {
	Explosion2 *Explosion2 `protobuf:"bytes,13,opt,name=explosion2,proto3,oneof"`
}

type TempEntity_Beam struct {
	Beam *Line `protobuf:"bytes,14,opt,name=beam,proto3,oneof"`
}

func (*TempEntity_Spike) isTempEntity_Union() {}

func (*TempEntity_SuperSpike) isTempEntity_Union() {}

func (*TempEntity_Gunshot) isTempEntity_Union() {}

func (*TempEntity_Explosion) isTempEntity_Union() {}

func (*TempEntity_TarExplosion) isTempEntity_Union() {}

func (*TempEntity_Lightning1) isTempEntity_Union() {}

func (*TempEntity_Lightning2) isTempEntity_Union() {}

func (*TempEntity_WizSpike) isTempEntity_Union() {}

func (*TempEntity_KnightSpike) isTempEntity_Union() {}

func (*TempEntity_Lightning3) isTempEntity_Union() {}

func (*TempEntity_LavaSplash) isTempEntity_Union() {}

func (*TempEntity_Teleport) isTempEntity_Union() {}

func (*TempEntity_Explosion2) isTempEntity_Union() {}

func (*TempEntity_Beam) isTempEntity_Union() {}

type LightStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx      int32  `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	NewStyle string `protobuf:"bytes,2,opt,name=new_style,json=newStyle,proto3" json:"new_style,omitempty"`
}

func (x *LightStyle) Reset() {
	*x = LightStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightStyle) ProtoMessage() {}

func (x *LightStyle) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightStyle.ProtoReflect.Descriptor instead.
func (*LightStyle) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{6}
}

func (x *LightStyle) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *LightStyle) GetNewStyle() string {
	if x != nil {
		return x.NewStyle
	}
	return ""
}

type Sound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume      *int32 `protobuf:"varint,1,opt,name=volume,proto3,oneof" json:"volume,omitempty"`               // byte - default 255
	Attenuation *int32 `protobuf:"varint,2,opt,name=attenuation,proto3,oneof" json:"attenuation,omitempty"`     // byte - default 64
	Entity      int32  `protobuf:"varint,3,opt,name=entity,proto3" json:"entity,omitempty"`                     // int16
	Channel     int32  `protobuf:"varint,4,opt,name=channel,proto3" json:"channel,omitempty"`                   // byte
	SoundNum    int32  `protobuf:"varint,5,opt,name=sound_num,json=soundNum,proto3" json:"sound_num,omitempty"` // int16
	Origin      *Coord `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`                      // float,float,float
}

func (x *Sound) Reset() {
	*x = Sound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sound) ProtoMessage() {}

func (x *Sound) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sound.ProtoReflect.Descriptor instead.
func (*Sound) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{7}
}

func (x *Sound) GetVolume() int32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *Sound) GetAttenuation() int32 {
	if x != nil && x.Attenuation != nil {
		return *x.Attenuation
	}
	return 0
}

func (x *Sound) GetEntity() int32 {
	if x != nil {
		return x.Entity
	}
	return 0
}

func (x *Sound) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *Sound) GetSoundNum() int32 {
	if x != nil {
		return x.SoundNum
	}
	return 0
}

func (x *Sound) GetOrigin() *Coord {
	if x != nil {
		return x.Origin
	}
	return nil
}

type UpdateName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player  int32  `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *UpdateName) Reset() {
	*x = UpdateName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateName) ProtoMessage() {}

func (x *UpdateName) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateName.ProtoReflect.Descriptor instead.
func (*UpdateName) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateName) GetPlayer() int32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *UpdateName) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type UpdateFrags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player   int32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	NewFrags int32 `protobuf:"varint,2,opt,name=new_frags,json=newFrags,proto3" json:"new_frags,omitempty"`
}

func (x *UpdateFrags) Reset() {
	*x = UpdateFrags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFrags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFrags) ProtoMessage() {}

func (x *UpdateFrags) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFrags.ProtoReflect.Descriptor instead.
func (*UpdateFrags) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateFrags) GetPlayer() int32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *UpdateFrags) GetNewFrags() int32 {
	if x != nil {
		return x.NewFrags
	}
	return 0
}

type UpdateColors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player   int32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	NewColor int32 `protobuf:"varint,2,opt,name=new_color,json=newColor,proto3" json:"new_color,omitempty"`
}

func (x *UpdateColors) Reset() {
	*x = UpdateColors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColors) ProtoMessage() {}

func (x *UpdateColors) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColors.ProtoReflect.Descriptor instead.
func (*UpdateColors) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateColors) GetPlayer() int32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *UpdateColors) GetNewColor() int32 {
	if x != nil {
		return x.NewColor
	}
	return 0
}

type ClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewHeight   *int32    `protobuf:"varint,1,opt,name=view_height,json=viewHeight,proto3,oneof" json:"view_height,omitempty"` // byte, default 22
	IdealPitch   int32     `protobuf:"varint,2,opt,name=ideal_pitch,json=idealPitch,proto3" json:"ideal_pitch,omitempty"`       // byte
	PunchAngle   *IntCoord `protobuf:"bytes,3,opt,name=punch_angle,json=punchAngle,proto3" json:"punch_angle,omitempty"`        // byte
	Velocity     *IntCoord `protobuf:"bytes,4,opt,name=velocity,proto3" json:"velocity,omitempty"`                              // byte
	Items        uint32    `protobuf:"fixed32,5,opt,name=items,proto3" json:"items,omitempty"`                                  // uint32 bitfield
	OnGround     bool      `protobuf:"varint,6,opt,name=on_ground,json=onGround,proto3" json:"on_ground,omitempty"`
	InWater      bool      `protobuf:"varint,7,opt,name=in_water,json=inWater,proto3" json:"in_water,omitempty"`
	WeaponFrame  int32     `protobuf:"varint,8,opt,name=weapon_frame,json=weaponFrame,proto3" json:"weapon_frame,omitempty"`     // byte + byte
	Armor        int32     `protobuf:"varint,9,opt,name=armor,proto3" json:"armor,omitempty"`                                    // byte + byte
	Weapon       int32     `protobuf:"varint,10,opt,name=weapon,proto3" json:"weapon,omitempty"`                                 // byte + byte, idx of weapon model in model cache
	Health       int32     `protobuf:"varint,11,opt,name=health,proto3" json:"health,omitempty"`                                 // uint16
	Ammo         int32     `protobuf:"varint,12,opt,name=ammo,proto3" json:"ammo,omitempty"`                                     // byte + byte
	Shells       int32     `protobuf:"varint,13,opt,name=shells,proto3" json:"shells,omitempty"`                                 // byte + byte
	Nails        int32     `protobuf:"varint,14,opt,name=nails,proto3" json:"nails,omitempty"`                                   // byte + byte
	Rockets      int32     `protobuf:"varint,15,opt,name=rockets,proto3" json:"rockets,omitempty"`                               // byte + byte
	Cells        int32     `protobuf:"varint,16,opt,name=cells,proto3" json:"cells,omitempty"`                                   // byte + byte
	ActiveWeapon int32     `protobuf:"varint,17,opt,name=active_weapon,json=activeWeapon,proto3" json:"active_weapon,omitempty"` // byte
	WeaponAlpha  int32     `protobuf:"varint,18,opt,name=weapon_alpha,json=weaponAlpha,proto3" json:"weapon_alpha,omitempty"`    // byte
}

func (x *ClientData) Reset() {
	*x = ClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientData) ProtoMessage() {}

func (x *ClientData) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientData.ProtoReflect.Descriptor instead.
func (*ClientData) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{11}
}

func (x *ClientData) GetViewHeight() int32 {
	if x != nil && x.ViewHeight != nil {
		return *x.ViewHeight
	}
	return 0
}

func (x *ClientData) GetIdealPitch() int32 {
	if x != nil {
		return x.IdealPitch
	}
	return 0
}

func (x *ClientData) GetPunchAngle() *IntCoord {
	if x != nil {
		return x.PunchAngle
	}
	return nil
}

func (x *ClientData) GetVelocity() *IntCoord {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *ClientData) GetItems() uint32 {
	if x != nil {
		return x.Items
	}
	return 0
}

func (x *ClientData) GetOnGround() bool {
	if x != nil {
		return x.OnGround
	}
	return false
}

func (x *ClientData) GetInWater() bool {
	if x != nil {
		return x.InWater
	}
	return false
}

func (x *ClientData) GetWeaponFrame() int32 {
	if x != nil {
		return x.WeaponFrame
	}
	return 0
}

func (x *ClientData) GetArmor() int32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *ClientData) GetWeapon() int32 {
	if x != nil {
		return x.Weapon
	}
	return 0
}

func (x *ClientData) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *ClientData) GetAmmo() int32 {
	if x != nil {
		return x.Ammo
	}
	return 0
}

func (x *ClientData) GetShells() int32 {
	if x != nil {
		return x.Shells
	}
	return 0
}

func (x *ClientData) GetNails() int32 {
	if x != nil {
		return x.Nails
	}
	return 0
}

func (x *ClientData) GetRockets() int32 {
	if x != nil {
		return x.Rockets
	}
	return 0
}

func (x *ClientData) GetCells() int32 {
	if x != nil {
		return x.Cells
	}
	return 0
}

func (x *ClientData) GetActiveWeapon() int32 {
	if x != nil {
		return x.ActiveWeapon
	}
	return 0
}

func (x *ClientData) GetWeaponAlpha() int32 {
	if x != nil {
		return x.WeaponAlpha
	}
	return 0
}

type Baseline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIndex int32  `protobuf:"varint,1,opt,name=model_index,json=modelIndex,proto3" json:"model_index,omitempty"` // byte/uint16
	Frame      int32  `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`                             // byte/uint16
	ColorMap   int32  `protobuf:"varint,3,opt,name=color_map,json=colorMap,proto3" json:"color_map,omitempty"`       // byte, unused
	Skin       int32  `protobuf:"varint,4,opt,name=skin,proto3" json:"skin,omitempty"`                               // byte
	Origin     *Coord `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	Angles     *Coord `protobuf:"bytes,6,opt,name=angles,proto3" json:"angles,omitempty"`
	Alpha      int32  `protobuf:"varint,7,opt,name=alpha,proto3" json:"alpha,omitempty"` // byte
}

func (x *Baseline) Reset() {
	*x = Baseline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Baseline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Baseline) ProtoMessage() {}

func (x *Baseline) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Baseline.ProtoReflect.Descriptor instead.
func (*Baseline) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{12}
}

func (x *Baseline) GetModelIndex() int32 {
	if x != nil {
		return x.ModelIndex
	}
	return 0
}

func (x *Baseline) GetFrame() int32 {
	if x != nil {
		return x.Frame
	}
	return 0
}

func (x *Baseline) GetColorMap() int32 {
	if x != nil {
		return x.ColorMap
	}
	return 0
}

func (x *Baseline) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *Baseline) GetOrigin() *Coord {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Baseline) GetAngles() *Coord {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *Baseline) GetAlpha() int32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

type EntityBaseline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int32     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // uint16
	Baseline *Baseline `protobuf:"bytes,2,opt,name=baseline,proto3" json:"baseline,omitempty"`
}

func (x *EntityBaseline) Reset() {
	*x = EntityBaseline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityBaseline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityBaseline) ProtoMessage() {}

func (x *EntityBaseline) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityBaseline.ProtoReflect.Descriptor instead.
func (*EntityBaseline) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{13}
}

func (x *EntityBaseline) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EntityBaseline) GetBaseline() *Baseline {
	if x != nil {
		return x.Baseline
	}
	return nil
}

type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol      int32    `protobuf:"varint,1,opt,name=protocol,proto3" json:"protocol,omitempty"`                       // int32
	Flags         int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                             // uint32
	MaxClients    int32    `protobuf:"varint,3,opt,name=max_clients,json=maxClients,proto3" json:"max_clients,omitempty"` // byte
	GameType      int32    `protobuf:"varint,4,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`       // byte
	LevelName     string   `protobuf:"bytes,5,opt,name=level_name,json=levelName,proto3" json:"level_name,omitempty"`
	ModelPrecache []string `protobuf:"bytes,6,rep,name=model_precache,json=modelPrecache,proto3" json:"model_precache,omitempty"`
	SoundPrecache []string `protobuf:"bytes,7,rep,name=sound_precache,json=soundPrecache,proto3" json:"sound_precache,omitempty"`
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{14}
}

func (x *ServerInfo) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *ServerInfo) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ServerInfo) GetMaxClients() int32 {
	if x != nil {
		return x.MaxClients
	}
	return 0
}

func (x *ServerInfo) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ServerInfo) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *ServerInfo) GetModelPrecache() []string {
	if x != nil {
		return x.ModelPrecache
	}
	return nil
}

func (x *ServerInfo) GetSoundPrecache() []string {
	if x != nil {
		return x.SoundPrecache
	}
	return nil
}

type EntityUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity       int32    `protobuf:"varint,1,opt,name=entity,proto3" json:"entity,omitempty"`
	LerpMoveStep bool     `protobuf:"varint,2,opt,name=lerp_move_step,json=lerpMoveStep,proto3" json:"lerp_move_step,omitempty"` // -- need recheck
	Model        *int32   `protobuf:"varint,3,opt,name=model,proto3,oneof" json:"model,omitempty"`
	Frame        *int32   `protobuf:"varint,4,opt,name=frame,proto3,oneof" json:"frame,omitempty"`
	ColorMap     *int32   `protobuf:"varint,5,opt,name=color_map,json=colorMap,proto3,oneof" json:"color_map,omitempty"`
	Skin         *int32   `protobuf:"varint,6,opt,name=skin,proto3,oneof" json:"skin,omitempty"`
	Effects      int32    `protobuf:"varint,7,opt,name=effects,proto3" json:"effects,omitempty"`
	OriginX      *float32 `protobuf:"fixed32,8,opt,name=origin_x,json=originX,proto3,oneof" json:"origin_x,omitempty"`
	OriginY      *float32 `protobuf:"fixed32,9,opt,name=origin_y,json=originY,proto3,oneof" json:"origin_y,omitempty"`
	OriginZ      *float32 `protobuf:"fixed32,10,opt,name=origin_z,json=originZ,proto3,oneof" json:"origin_z,omitempty"`
	AngleX       *float32 `protobuf:"fixed32,11,opt,name=angle_x,json=angleX,proto3,oneof" json:"angle_x,omitempty"`
	AngleY       *float32 `protobuf:"fixed32,12,opt,name=angle_y,json=angleY,proto3,oneof" json:"angle_y,omitempty"`
	AngleZ       *float32 `protobuf:"fixed32,13,opt,name=angle_z,json=angleZ,proto3,oneof" json:"angle_z,omitempty"`
	LerpFinish   *int32   `protobuf:"varint,14,opt,name=lerp_finish,json=lerpFinish,proto3,oneof" json:"lerp_finish,omitempty"`
	Alpha        *int32   `protobuf:"varint,15,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"` // optional int32 scale = 16; // not used
}

func (x *EntityUpdate) Reset() {
	*x = EntityUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityUpdate) ProtoMessage() {}

func (x *EntityUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityUpdate.ProtoReflect.Descriptor instead.
func (*EntityUpdate) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{15}
}

func (x *EntityUpdate) GetEntity() int32 {
	if x != nil {
		return x.Entity
	}
	return 0
}

func (x *EntityUpdate) GetLerpMoveStep() bool {
	if x != nil {
		return x.LerpMoveStep
	}
	return false
}

func (x *EntityUpdate) GetModel() int32 {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return 0
}

func (x *EntityUpdate) GetFrame() int32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return 0
}

func (x *EntityUpdate) GetColorMap() int32 {
	if x != nil && x.ColorMap != nil {
		return *x.ColorMap
	}
	return 0
}

func (x *EntityUpdate) GetSkin() int32 {
	if x != nil && x.Skin != nil {
		return *x.Skin
	}
	return 0
}

func (x *EntityUpdate) GetEffects() int32 {
	if x != nil {
		return x.Effects
	}
	return 0
}

func (x *EntityUpdate) GetOriginX() float32 {
	if x != nil && x.OriginX != nil {
		return *x.OriginX
	}
	return 0
}

func (x *EntityUpdate) GetOriginY() float32 {
	if x != nil && x.OriginY != nil {
		return *x.OriginY
	}
	return 0
}

func (x *EntityUpdate) GetOriginZ() float32 {
	if x != nil && x.OriginZ != nil {
		return *x.OriginZ
	}
	return 0
}

func (x *EntityUpdate) GetAngleX() float32 {
	if x != nil && x.AngleX != nil {
		return *x.AngleX
	}
	return 0
}

func (x *EntityUpdate) GetAngleY() float32 {
	if x != nil && x.AngleY != nil {
		return *x.AngleY
	}
	return 0
}

func (x *EntityUpdate) GetAngleZ() float32 {
	if x != nil && x.AngleZ != nil {
		return *x.AngleZ
	}
	return 0
}

func (x *EntityUpdate) GetLerpFinish() int32 {
	if x != nil && x.LerpFinish != nil {
		return *x.LerpFinish
	}
	return 0
}

func (x *EntityUpdate) GetAlpha() int32 {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return 0
}

type StaticSound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin      *Coord `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Index       int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Volume      int32  `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Attenuation int32  `protobuf:"varint,4,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
}

func (x *StaticSound) Reset() {
	*x = StaticSound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticSound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticSound) ProtoMessage() {}

func (x *StaticSound) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticSound.ProtoReflect.Descriptor instead.
func (*StaticSound) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{16}
}

func (x *StaticSound) GetOrigin() *Coord {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *StaticSound) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *StaticSound) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StaticSound) GetAttenuation() int32 {
	if x != nil {
		return x.Attenuation
	}
	return 0
}

type Damage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Armor    int32  `protobuf:"varint,1,opt,name=armor,proto3" json:"armor,omitempty"`
	Blood    int32  `protobuf:"varint,2,opt,name=blood,proto3" json:"blood,omitempty"`
	Position *Coord `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Damage) Reset() {
	*x = Damage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Damage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Damage) ProtoMessage() {}

func (x *Damage) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Damage.ProtoReflect.Descriptor instead.
func (*Damage) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{17}
}

func (x *Damage) GetArmor() int32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *Damage) GetBlood() int32 {
	if x != nil {
		return x.Blood
	}
	return 0
}

func (x *Damage) GetPosition() *Coord {
	if x != nil {
		return x.Position
	}
	return nil
}

type CDTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackNumber int32 `protobuf:"varint,1,opt,name=track_number,json=trackNumber,proto3" json:"track_number,omitempty"`
	LoopTrack   int32 `protobuf:"varint,2,opt,name=loop_track,json=loopTrack,proto3" json:"loop_track,omitempty"`
}

func (x *CDTrack) Reset() {
	*x = CDTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDTrack) ProtoMessage() {}

func (x *CDTrack) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDTrack.ProtoReflect.Descriptor instead.
func (*CDTrack) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{18}
}

func (x *CDTrack) GetTrackNumber() int32 {
	if x != nil {
		return x.TrackNumber
	}
	return 0
}

func (x *CDTrack) GetLoopTrack() int32 {
	if x != nil {
		return x.LoopTrack
	}
	return 0
}

type UpdateStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat  int32 `protobuf:"varint,1,opt,name=stat,proto3" json:"stat,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateStat) Reset() {
	*x = UpdateStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStat) ProtoMessage() {}

func (x *UpdateStat) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStat.ProtoReflect.Descriptor instead.
func (*UpdateStat) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateStat) GetStat() int32 {
	if x != nil {
		return x.Stat
	}
	return 0
}

func (x *UpdateStat) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Particle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin    *Coord `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Direction *Coord `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Count     int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Color     int32  `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Particle) Reset() {
	*x = Particle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Particle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Particle) ProtoMessage() {}

func (x *Particle) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Particle.ProtoReflect.Descriptor instead.
func (*Particle) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{20}
}

func (x *Particle) GetOrigin() *Coord {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Particle) GetDirection() *Coord {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *Particle) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Particle) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type Fog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Density float32 `protobuf:"fixed32,1,opt,name=density,proto3" json:"density,omitempty"`
	Red     float32 `protobuf:"fixed32,2,opt,name=red,proto3" json:"red,omitempty"`
	Green   float32 `protobuf:"fixed32,3,opt,name=green,proto3" json:"green,omitempty"`
	Blue    float32 `protobuf:"fixed32,4,opt,name=blue,proto3" json:"blue,omitempty"`
	Time    float32 `protobuf:"fixed32,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Fog) Reset() {
	*x = Fog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fog) ProtoMessage() {}

func (x *Fog) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fog.ProtoReflect.Descriptor instead.
func (*Fog) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{21}
}

func (x *Fog) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *Fog) GetRed() float32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *Fog) GetGreen() float32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *Fog) GetBlue() float32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *Fog) GetTime() float32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//	*SCmd_Disconnect
	//	*SCmd_EntityUpdate
	//	*SCmd_UpdateStat
	//	*SCmd_Version
	//	*SCmd_SetViewEntity
	//	*SCmd_Sound
	//	*SCmd_Time
	//	*SCmd_Print
	//	*SCmd_StuffText
	//	*SCmd_SetAngle
	//	*SCmd_ServerInfo
	//	*SCmd_LightStyle
	//	*SCmd_UpdateName
	//	*SCmd_UpdateFrags
	//	*SCmd_ClientData
	//	*SCmd_StopSound
	//	*SCmd_UpdateColors
	//	*SCmd_Particle
	//	*SCmd_Damage
	//	*SCmd_SpawnStatic
	//	*SCmd_SpawnBaseline
	//	*SCmd_TempEntity
	//	*SCmd_SetPause
	//	*SCmd_SignonNum
	//	*SCmd_CenterPrint
	//	*SCmd_KilledMonster
	//	*SCmd_FoundSecret
	//	*SCmd_SpawnStaticSound
	//	*SCmd_Intermission
	//	*SCmd_Finale
	//	*SCmd_CdTrack
	//	*SCmd_SellScreen
	//	*SCmd_Cutscene
	//	*SCmd_Skybox
	//	*SCmd_BackgroundFlash
	//	*SCmd_Fog
	//	*SCmd_Achievement
	Union isSCmd_Union `protobuf_oneof:"union"`
}

func (x *SCmd) Reset() {
	*x = SCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCmd) ProtoMessage() {}

func (x *SCmd) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCmd.ProtoReflect.Descriptor instead.
func (*SCmd) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{22}
}

func (m *SCmd) GetUnion() isSCmd_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *SCmd) GetDisconnect() bool {
	if x, ok := x.GetUnion().(*SCmd_Disconnect); ok {
		return x.Disconnect
	}
	return false
}

func (x *SCmd) GetEntityUpdate() *EntityUpdate {
	if x, ok := x.GetUnion().(*SCmd_EntityUpdate); ok {
		return x.EntityUpdate
	}
	return nil
}

func (x *SCmd) GetUpdateStat() *UpdateStat {
	if x, ok := x.GetUnion().(*SCmd_UpdateStat); ok {
		return x.UpdateStat
	}
	return nil
}

func (x *SCmd) GetVersion() int32 {
	if x, ok := x.GetUnion().(*SCmd_Version); ok {
		return x.Version
	}
	return 0
}

func (x *SCmd) GetSetViewEntity() int32 {
	if x, ok := x.GetUnion().(*SCmd_SetViewEntity); ok {
		return x.SetViewEntity
	}
	return 0
}

func (x *SCmd) GetSound() *Sound {
	if x, ok := x.GetUnion().(*SCmd_Sound); ok {
		return x.Sound
	}
	return nil
}

func (x *SCmd) GetTime() float32 {
	if x, ok := x.GetUnion().(*SCmd_Time); ok {
		return x.Time
	}
	return 0
}

func (x *SCmd) GetPrint() string {
	if x, ok := x.GetUnion().(*SCmd_Print); ok {
		return x.Print
	}
	return ""
}

func (x *SCmd) GetStuffText() string {
	if x, ok := x.GetUnion().(*SCmd_StuffText); ok {
		return x.StuffText
	}
	return ""
}

func (x *SCmd) GetSetAngle() *Coord {
	if x, ok := x.GetUnion().(*SCmd_SetAngle); ok {
		return x.SetAngle
	}
	return nil
}

func (x *SCmd) GetServerInfo() *ServerInfo {
	if x, ok := x.GetUnion().(*SCmd_ServerInfo); ok {
		return x.ServerInfo
	}
	return nil
}

func (x *SCmd) GetLightStyle() *LightStyle {
	if x, ok := x.GetUnion().(*SCmd_LightStyle); ok {
		return x.LightStyle
	}
	return nil
}

func (x *SCmd) GetUpdateName() *UpdateName {
	if x, ok := x.GetUnion().(*SCmd_UpdateName); ok {
		return x.UpdateName
	}
	return nil
}

func (x *SCmd) GetUpdateFrags() *UpdateFrags {
	if x, ok := x.GetUnion().(*SCmd_UpdateFrags); ok {
		return x.UpdateFrags
	}
	return nil
}

func (x *SCmd) GetClientData() *ClientData {
	if x, ok := x.GetUnion().(*SCmd_ClientData); ok {
		return x.ClientData
	}
	return nil
}

func (x *SCmd) GetStopSound() int32 {
	if x, ok := x.GetUnion().(*SCmd_StopSound); ok {
		return x.StopSound
	}
	return 0
}

func (x *SCmd) GetUpdateColors() *UpdateColors {
	if x, ok := x.GetUnion().(*SCmd_UpdateColors); ok {
		return x.UpdateColors
	}
	return nil
}

func (x *SCmd) GetParticle() *Particle {
	if x, ok := x.GetUnion().(*SCmd_Particle); ok {
		return x.Particle
	}
	return nil
}

func (x *SCmd) GetDamage() *Damage {
	if x, ok := x.GetUnion().(*SCmd_Damage); ok {
		return x.Damage
	}
	return nil
}

func (x *SCmd) GetSpawnStatic() *Baseline {
	if x, ok := x.GetUnion().(*SCmd_SpawnStatic); ok {
		return x.SpawnStatic
	}
	return nil
}

func (x *SCmd) GetSpawnBaseline() *EntityBaseline {
	if x, ok := x.GetUnion().(*SCmd_SpawnBaseline); ok {
		return x.SpawnBaseline
	}
	return nil
}

func (x *SCmd) GetTempEntity() *TempEntity {
	if x, ok := x.GetUnion().(*SCmd_TempEntity); ok {
		return x.TempEntity
	}
	return nil
}

func (x *SCmd) GetSetPause() bool {
	if x, ok := x.GetUnion().(*SCmd_SetPause); ok {
		return x.SetPause
	}
	return false
}

func (x *SCmd) GetSignonNum() int32 {
	if x, ok := x.GetUnion().(*SCmd_SignonNum); ok {
		return x.SignonNum
	}
	return 0
}

func (x *SCmd) GetCenterPrint() string {
	if x, ok := x.GetUnion().(*SCmd_CenterPrint); ok {
		return x.CenterPrint
	}
	return ""
}

func (x *SCmd) GetKilledMonster() *Empty {
	if x, ok := x.GetUnion().(*SCmd_KilledMonster); ok {
		return x.KilledMonster
	}
	return nil
}

func (x *SCmd) GetFoundSecret() *Empty {
	if x, ok := x.GetUnion().(*SCmd_FoundSecret); ok {
		return x.FoundSecret
	}
	return nil
}

func (x *SCmd) GetSpawnStaticSound() *StaticSound {
	if x, ok := x.GetUnion().(*SCmd_SpawnStaticSound); ok {
		return x.SpawnStaticSound
	}
	return nil
}

func (x *SCmd) GetIntermission() *Empty {
	if x, ok := x.GetUnion().(*SCmd_Intermission); ok {
		return x.Intermission
	}
	return nil
}

func (x *SCmd) GetFinale() string {
	if x, ok := x.GetUnion().(*SCmd_Finale); ok {
		return x.Finale
	}
	return ""
}

func (x *SCmd) GetCdTrack() *CDTrack {
	if x, ok := x.GetUnion().(*SCmd_CdTrack); ok {
		return x.CdTrack
	}
	return nil
}

func (x *SCmd) GetSellScreen() *Empty {
	if x, ok := x.GetUnion().(*SCmd_SellScreen); ok {
		return x.SellScreen
	}
	return nil
}

func (x *SCmd) GetCutscene() string {
	if x, ok := x.GetUnion().(*SCmd_Cutscene); ok {
		return x.Cutscene
	}
	return ""
}

func (x *SCmd) GetSkybox() string {
	if x, ok := x.GetUnion().(*SCmd_Skybox); ok {
		return x.Skybox
	}
	return ""
}

func (x *SCmd) GetBackgroundFlash() *Empty {
	if x, ok := x.GetUnion().(*SCmd_BackgroundFlash); ok {
		return x.BackgroundFlash
	}
	return nil
}

func (x *SCmd) GetFog() *Fog {
	if x, ok := x.GetUnion().(*SCmd_Fog); ok {
		return x.Fog
	}
	return nil
}

func (x *SCmd) GetAchievement() string {
	if x, ok := x.GetUnion().(*SCmd_Achievement); ok {
		return x.Achievement
	}
	return ""
}

type isSCmd_Union interface {
	isSCmd_Union()
}

type SCmd_Disconnect struct {
	// Empty nop = 1;
	Disconnect bool `protobuf:"varint,2,opt,name=disconnect,proto3,oneof"`
}

type SCmd_EntityUpdate struct {
	EntityUpdate *EntityUpdate `protobuf:"bytes,45,opt,name=entity_update,json=entityUpdate,proto3,oneof"`
}

type SCmd_UpdateStat struct {
	UpdateStat *UpdateStat `protobuf:"bytes,3,opt,name=update_stat,json=updateStat,proto3,oneof"` // -- int32, int32 (byte + int32)
}

type SCmd_Version struct {
	Version int32 `protobuf:"varint,4,opt,name=version,proto3,oneof"`
}

type SCmd_SetViewEntity struct {
	SetViewEntity int32 `protobuf:"varint,5,opt,name=set_view_entity,json=setViewEntity,proto3,oneof"` // set_view
}

type SCmd_Sound struct {
	Sound *Sound `protobuf:"bytes,6,opt,name=sound,proto3,oneof"`
}

type SCmd_Time struct {
	Time float32 `protobuf:"fixed32,7,opt,name=time,proto3,oneof"`
}

type SCmd_Print struct {
	Print string `protobuf:"bytes,8,opt,name=print,proto3,oneof"`
}

type SCmd_StuffText struct {
	StuffText string `protobuf:"bytes,9,opt,name=stuff_text,json=stuffText,proto3,oneof"`
}

type SCmd_SetAngle struct {
	SetAngle *Coord `protobuf:"bytes,10,opt,name=set_angle,json=setAngle,proto3,oneof"`
}

type SCmd_ServerInfo struct {
	ServerInfo *ServerInfo `protobuf:"bytes,11,opt,name=server_info,json=serverInfo,proto3,oneof"`
}

type SCmd_LightStyle struct {
	LightStyle *LightStyle `protobuf:"bytes,12,opt,name=light_style,json=lightStyle,proto3,oneof"`
}

type SCmd_UpdateName struct {
	UpdateName *UpdateName `protobuf:"bytes,13,opt,name=update_name,json=updateName,proto3,oneof"`
}

type SCmd_UpdateFrags struct {
	UpdateFrags *UpdateFrags `protobuf:"bytes,14,opt,name=update_frags,json=updateFrags,proto3,oneof"`
}

type SCmd_ClientData struct {
	ClientData *ClientData `protobuf:"bytes,15,opt,name=client_data,json=clientData,proto3,oneof"`
}

type SCmd_StopSound struct {
	StopSound int32 `protobuf:"varint,16,opt,name=stop_sound,json=stopSound,proto3,oneof"`
}

type SCmd_UpdateColors struct {
	UpdateColors *UpdateColors `protobuf:"bytes,17,opt,name=update_colors,json=updateColors,proto3,oneof"`
}

type SCmd_Particle struct {
	Particle *Particle `protobuf:"bytes,18,opt,name=particle,proto3,oneof"` // -- Coord, Coord, int32, int32 ([3]float, [3]int8, int8, int8)
}

type SCmd_Damage struct {
	Damage *Damage `protobuf:"bytes,19,opt,name=damage,proto3,oneof"`
}

type SCmd_SpawnStatic struct {
	SpawnStatic *Baseline `protobuf:"bytes,20,opt,name=spawn_static,json=spawnStatic,proto3,oneof"`
}

type SCmd_SpawnBaseline struct {
	SpawnBaseline *EntityBaseline `protobuf:"bytes,22,opt,name=spawn_baseline,json=spawnBaseline,proto3,oneof"`
}

type SCmd_TempEntity struct {
	TempEntity *TempEntity `protobuf:"bytes,23,opt,name=temp_entity,json=tempEntity,proto3,oneof"`
}

type SCmd_SetPause struct {
	SetPause bool `protobuf:"varint,24,opt,name=set_pause,json=setPause,proto3,oneof"`
}

type SCmd_SignonNum struct {
	SignonNum int32 `protobuf:"varint,25,opt,name=signon_num,json=signonNum,proto3,oneof"`
}

type SCmd_CenterPrint struct {
	CenterPrint string `protobuf:"bytes,26,opt,name=center_print,json=centerPrint,proto3,oneof"`
}

type SCmd_KilledMonster struct {
	KilledMonster *Empty `protobuf:"bytes,27,opt,name=killed_monster,json=killedMonster,proto3,oneof"`
}

type SCmd_FoundSecret struct {
	FoundSecret *Empty `protobuf:"bytes,28,opt,name=found_secret,json=foundSecret,proto3,oneof"`
}

type SCmd_SpawnStaticSound struct {
	SpawnStaticSound *StaticSound `protobuf:"bytes,29,opt,name=spawn_static_sound,json=spawnStaticSound,proto3,oneof"`
}

type SCmd_Intermission struct {
	Intermission *Empty `protobuf:"bytes,30,opt,name=intermission,proto3,oneof"`
}

type SCmd_Finale struct {
	Finale string `protobuf:"bytes,31,opt,name=finale,proto3,oneof"`
}

type SCmd_CdTrack struct {
	CdTrack *CDTrack `protobuf:"bytes,32,opt,name=cd_track,json=cdTrack,proto3,oneof"` // -- int32, int32 (uint8, uint8)
}

type SCmd_SellScreen struct {
	SellScreen *Empty `protobuf:"bytes,33,opt,name=sell_screen,json=sellScreen,proto3,oneof"`
}

type SCmd_Cutscene struct {
	Cutscene string `protobuf:"bytes,34,opt,name=cutscene,proto3,oneof"`
}

type SCmd_Skybox struct {
	Skybox string `protobuf:"bytes,37,opt,name=skybox,proto3,oneof"`
}

type SCmd_BackgroundFlash struct {
	BackgroundFlash *Empty `protobuf:"bytes,40,opt,name=background_flash,json=backgroundFlash,proto3,oneof"`
}

type SCmd_Fog struct {
	Fog *Fog `protobuf:"bytes,41,opt,name=fog,proto3,oneof"`
}

type SCmd_Achievement struct {
	// EntityBaseline spawn_baseline2 = 42; -- not needed, covered by spawn_baseline
	// Baseline spawn_static2 = 43; -- not needed, covered by spawn_static
	// SpawnStaticSound2 spawn_static_sound2 = 44; -- not needed, covered by spawn_static_sound
	Achievement string `protobuf:"bytes,42,opt,name=achievement,proto3,oneof"`
}

func (*SCmd_Disconnect) isSCmd_Union() {}

func (*SCmd_EntityUpdate) isSCmd_Union() {}

func (*SCmd_UpdateStat) isSCmd_Union() {}

func (*SCmd_Version) isSCmd_Union() {}

func (*SCmd_SetViewEntity) isSCmd_Union() {}

func (*SCmd_Sound) isSCmd_Union() {}

func (*SCmd_Time) isSCmd_Union() {}

func (*SCmd_Print) isSCmd_Union() {}

func (*SCmd_StuffText) isSCmd_Union() {}

func (*SCmd_SetAngle) isSCmd_Union() {}

func (*SCmd_ServerInfo) isSCmd_Union() {}

func (*SCmd_LightStyle) isSCmd_Union() {}

func (*SCmd_UpdateName) isSCmd_Union() {}

func (*SCmd_UpdateFrags) isSCmd_Union() {}

func (*SCmd_ClientData) isSCmd_Union() {}

func (*SCmd_StopSound) isSCmd_Union() {}

func (*SCmd_UpdateColors) isSCmd_Union() {}

func (*SCmd_Particle) isSCmd_Union() {}

func (*SCmd_Damage) isSCmd_Union() {}

func (*SCmd_SpawnStatic) isSCmd_Union() {}

func (*SCmd_SpawnBaseline) isSCmd_Union() {}

func (*SCmd_TempEntity) isSCmd_Union() {}

func (*SCmd_SetPause) isSCmd_Union() {}

func (*SCmd_SignonNum) isSCmd_Union() {}

func (*SCmd_CenterPrint) isSCmd_Union() {}

func (*SCmd_KilledMonster) isSCmd_Union() {}

func (*SCmd_FoundSecret) isSCmd_Union() {}

func (*SCmd_SpawnStaticSound) isSCmd_Union() {}

func (*SCmd_Intermission) isSCmd_Union() {}

func (*SCmd_Finale) isSCmd_Union() {}

func (*SCmd_CdTrack) isSCmd_Union() {}

func (*SCmd_SellScreen) isSCmd_Union() {}

func (*SCmd_Cutscene) isSCmd_Union() {}

func (*SCmd_Skybox) isSCmd_Union() {}

func (*SCmd_BackgroundFlash) isSCmd_Union() {}

func (*SCmd_Fog) isSCmd_Union() {}

func (*SCmd_Achievement) isSCmd_Union() {}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmds []*SCmd `protobuf:"bytes,1,rep,name=cmds,proto3" json:"cmds,omitempty"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_server_message_proto_rawDescGZIP(), []int{23}
}

func (x *ServerMessage) GetCmds() []*SCmd {
	if x != nil {
		return x.Cmds
	}
	return nil
}

var File_server_message_proto protoreflect.FileDescriptor

var file_server_message_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x31,
	0x0a, 0x05, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x7a, 0x22, 0x34, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x22, 0x64, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x77, 0x0a,
	0x0a, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x29, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xa9, 0x05, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x05, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x67, 0x75, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x67, 0x75, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x2c, 0x0a, 0x09, 0x77, 0x69, 0x7a, 0x5f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x7a,
	0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x30, 0x0a, 0x0b, 0x6c, 0x61, 0x76,
	0x61, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x61, 0x76, 0x61, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x22,
	0x0a, 0x04, 0x62, 0x65, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x62, 0x65,
	0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x0a, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x05, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x46, 0x72, 0x61, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0xb5, 0x04, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x5f,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x61, 0x6c, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x0a,
	0x70, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x08,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x6d, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61,
	0x6d, 0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x42, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x25,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x22, 0x54, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x22, 0xe2, 0x04, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x65, 0x72, 0x70, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x72, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x6b, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x59, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x06, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x07, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52,
	0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x59, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x65, 0x72, 0x70,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x0a, 0x6c, 0x65, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52,
	0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x6b, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x7a, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x7a, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x65, 0x72, 0x70, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5f, 0x0a, 0x06, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72,
	0x6d, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4b, 0x0a, 0x07, 0x43, 0x44, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x36,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x03, 0x46, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x0d, 0x0a, 0x04, 0x53, 0x43, 0x6d, 0x64, 0x12, 0x20, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x3b, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x75, 0x66, 0x66, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x2c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x73,
	0x70, 0x61, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0c, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x73,
	0x70, 0x61, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x63, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x44, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x63, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x08, 0x63, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x6b, 0x79, 0x62, 0x6f, 0x78, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x6b, 0x79, 0x62, 0x6f, 0x78, 0x12, 0x3a, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x03, 0x66, 0x6f, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x6f, 0x67, 0x48, 0x00, 0x52,
	0x03, 0x66, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x43, 0x6d, 0x64, 0x52, 0x04,
	0x63, 0x6d, 0x64, 0x73, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x72, 0x6a, 0x61, 0x6b, 0x2f, 0x67, 0x6f, 0x71, 0x75, 0x61,
	0x6b, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_server_message_proto_rawDescOnce sync.Once
	file_server_message_proto_rawDescData = file_server_message_proto_rawDesc
)

func file_server_message_proto_rawDescGZIP() []byte {
	file_server_message_proto_rawDescOnce.Do(func() {
		file_server_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_message_proto_rawDescData)
	})
	return file_server_message_proto_rawDescData
}

var file_server_message_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_server_message_proto_goTypes = []interface{}{
	(*Coord)(nil),          // 0: protos.Coord
	(*IntCoord)(nil),       // 1: protos.IntCoord
	(*Line)(nil),           // 2: protos.Line
	(*Explosion2)(nil),     // 3: protos.Explosion2
	(*Empty)(nil),          // 4: protos.Empty
	(*TempEntity)(nil),     // 5: protos.TempEntity
	(*LightStyle)(nil),     // 6: protos.LightStyle
	(*Sound)(nil),          // 7: protos.Sound
	(*UpdateName)(nil),     // 8: protos.UpdateName
	(*UpdateFrags)(nil),    // 9: protos.UpdateFrags
	(*UpdateColors)(nil),   // 10: protos.UpdateColors
	(*ClientData)(nil),     // 11: protos.ClientData
	(*Baseline)(nil),       // 12: protos.Baseline
	(*EntityBaseline)(nil), // 13: protos.EntityBaseline
	(*ServerInfo)(nil),     // 14: protos.ServerInfo
	(*EntityUpdate)(nil),   // 15: protos.EntityUpdate
	(*StaticSound)(nil),    // 16: protos.StaticSound
	(*Damage)(nil),         // 17: protos.Damage
	(*CDTrack)(nil),        // 18: protos.CDTrack
	(*UpdateStat)(nil),     // 19: protos.UpdateStat
	(*Particle)(nil),       // 20: protos.Particle
	(*Fog)(nil),            // 21: protos.Fog
	(*SCmd)(nil),           // 22: protos.SCmd
	(*ServerMessage)(nil),  // 23: protos.ServerMessage
}
var file_server_message_proto_depIdxs = []int32{
	0,  // 0: protos.Line.start:type_name -> protos.Coord
	0,  // 1: protos.Line.end:type_name -> protos.Coord
	0,  // 2: protos.Explosion2.position:type_name -> protos.Coord
	0,  // 3: protos.TempEntity.spike:type_name -> protos.Coord
	0,  // 4: protos.TempEntity.super_spike:type_name -> protos.Coord
	0,  // 5: protos.TempEntity.gunshot:type_name -> protos.Coord
	0,  // 6: protos.TempEntity.explosion:type_name -> protos.Coord
	0,  // 7: protos.TempEntity.tar_explosion:type_name -> protos.Coord
	2,  // 8: protos.TempEntity.lightning1:type_name -> protos.Line
	2,  // 9: protos.TempEntity.lightning2:type_name -> protos.Line
	0,  // 10: protos.TempEntity.wiz_spike:type_name -> protos.Coord
	0,  // 11: protos.TempEntity.knight_spike:type_name -> protos.Coord
	2,  // 12: protos.TempEntity.lightning3:type_name -> protos.Line
	0,  // 13: protos.TempEntity.lava_splash:type_name -> protos.Coord
	0,  // 14: protos.TempEntity.teleport:type_name -> protos.Coord
	3,  // 15: protos.TempEntity.explosion2:type_name -> protos.Explosion2
	2,  // 16: protos.TempEntity.beam:type_name -> protos.Line
	0,  // 17: protos.Sound.origin:type_name -> protos.Coord
	1,  // 18: protos.ClientData.punch_angle:type_name -> protos.IntCoord
	1,  // 19: protos.ClientData.velocity:type_name -> protos.IntCoord
	0,  // 20: protos.Baseline.origin:type_name -> protos.Coord
	0,  // 21: protos.Baseline.angles:type_name -> protos.Coord
	12, // 22: protos.EntityBaseline.baseline:type_name -> protos.Baseline
	0,  // 23: protos.StaticSound.origin:type_name -> protos.Coord
	0,  // 24: protos.Damage.position:type_name -> protos.Coord
	0,  // 25: protos.Particle.origin:type_name -> protos.Coord
	0,  // 26: protos.Particle.direction:type_name -> protos.Coord
	15, // 27: protos.SCmd.entity_update:type_name -> protos.EntityUpdate
	19, // 28: protos.SCmd.update_stat:type_name -> protos.UpdateStat
	7,  // 29: protos.SCmd.sound:type_name -> protos.Sound
	0,  // 30: protos.SCmd.set_angle:type_name -> protos.Coord
	14, // 31: protos.SCmd.server_info:type_name -> protos.ServerInfo
	6,  // 32: protos.SCmd.light_style:type_name -> protos.LightStyle
	8,  // 33: protos.SCmd.update_name:type_name -> protos.UpdateName
	9,  // 34: protos.SCmd.update_frags:type_name -> protos.UpdateFrags
	11, // 35: protos.SCmd.client_data:type_name -> protos.ClientData
	10, // 36: protos.SCmd.update_colors:type_name -> protos.UpdateColors
	20, // 37: protos.SCmd.particle:type_name -> protos.Particle
	17, // 38: protos.SCmd.damage:type_name -> protos.Damage
	12, // 39: protos.SCmd.spawn_static:type_name -> protos.Baseline
	13, // 40: protos.SCmd.spawn_baseline:type_name -> protos.EntityBaseline
	5,  // 41: protos.SCmd.temp_entity:type_name -> protos.TempEntity
	4,  // 42: protos.SCmd.killed_monster:type_name -> protos.Empty
	4,  // 43: protos.SCmd.found_secret:type_name -> protos.Empty
	16, // 44: protos.SCmd.spawn_static_sound:type_name -> protos.StaticSound
	4,  // 45: protos.SCmd.intermission:type_name -> protos.Empty
	18, // 46: protos.SCmd.cd_track:type_name -> protos.CDTrack
	4,  // 47: protos.SCmd.sell_screen:type_name -> protos.Empty
	4,  // 48: protos.SCmd.background_flash:type_name -> protos.Empty
	21, // 49: protos.SCmd.fog:type_name -> protos.Fog
	22, // 50: protos.ServerMessage.cmds:type_name -> protos.SCmd
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_server_message_proto_init() }
func file_server_message_proto_init() {
	if File_server_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntCoord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Explosion2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFrags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Baseline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityBaseline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticSound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Damage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Particle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_message_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TempEntity_Spike)(nil),
		(*TempEntity_SuperSpike)(nil),
		(*TempEntity_Gunshot)(nil),
		(*TempEntity_Explosion)(nil),
		(*TempEntity_TarExplosion)(nil),
		(*TempEntity_Lightning1)(nil),
		(*TempEntity_Lightning2)(nil),
		(*TempEntity_WizSpike)(nil),
		(*TempEntity_KnightSpike)(nil),
		(*TempEntity_Lightning3)(nil),
		(*TempEntity_LavaSplash)(nil),
		(*TempEntity_Teleport)(nil),
		(*TempEntity_Explosion2)(nil),
		(*TempEntity_Beam)(nil),
	}
	file_server_message_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_server_message_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_server_message_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_server_message_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*SCmd_Disconnect)(nil),
		(*SCmd_EntityUpdate)(nil),
		(*SCmd_UpdateStat)(nil),
		(*SCmd_Version)(nil),
		(*SCmd_SetViewEntity)(nil),
		(*SCmd_Sound)(nil),
		(*SCmd_Time)(nil),
		(*SCmd_Print)(nil),
		(*SCmd_StuffText)(nil),
		(*SCmd_SetAngle)(nil),
		(*SCmd_ServerInfo)(nil),
		(*SCmd_LightStyle)(nil),
		(*SCmd_UpdateName)(nil),
		(*SCmd_UpdateFrags)(nil),
		(*SCmd_ClientData)(nil),
		(*SCmd_StopSound)(nil),
		(*SCmd_UpdateColors)(nil),
		(*SCmd_Particle)(nil),
		(*SCmd_Damage)(nil),
		(*SCmd_SpawnStatic)(nil),
		(*SCmd_SpawnBaseline)(nil),
		(*SCmd_TempEntity)(nil),
		(*SCmd_SetPause)(nil),
		(*SCmd_SignonNum)(nil),
		(*SCmd_CenterPrint)(nil),
		(*SCmd_KilledMonster)(nil),
		(*SCmd_FoundSecret)(nil),
		(*SCmd_SpawnStaticSound)(nil),
		(*SCmd_Intermission)(nil),
		(*SCmd_Finale)(nil),
		(*SCmd_CdTrack)(nil),
		(*SCmd_SellScreen)(nil),
		(*SCmd_Cutscene)(nil),
		(*SCmd_Skybox)(nil),
		(*SCmd_BackgroundFlash)(nil),
		(*SCmd_Fog)(nil),
		(*SCmd_Achievement)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_message_proto_goTypes,
		DependencyIndexes: file_server_message_proto_depIdxs,
		MessageInfos:      file_server_message_proto_msgTypes,
	}.Build()
	File_server_message_proto = out.File
	file_server_message_proto_rawDesc = nil
	file_server_message_proto_goTypes = nil
	file_server_message_proto_depIdxs = nil
}
