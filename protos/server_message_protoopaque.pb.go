// SPDX-License-Identifier: GPL-2.0-or-later

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.2
// source: server_message.proto

//go:build protoopaque

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Coord struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_X  float32                `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	xxx_hidden_Y  float32                `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	xxx_hidden_Z  float32                `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Coord) Reset() {
	*x = Coord{}
	mi := &file_server_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coord) ProtoMessage() {}

func (x *Coord) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Coord) GetX() float32 {
	if x != nil {
		return x.xxx_hidden_X
	}
	return 0
}

func (x *Coord) GetY() float32 {
	if x != nil {
		return x.xxx_hidden_Y
	}
	return 0
}

func (x *Coord) GetZ() float32 {
	if x != nil {
		return x.xxx_hidden_Z
	}
	return 0
}

func (x *Coord) SetX(v float32) {
	x.xxx_hidden_X = v
}

func (x *Coord) SetY(v float32) {
	x.xxx_hidden_Y = v
}

func (x *Coord) SetZ(v float32) {
	x.xxx_hidden_Z = v
}

type Coord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	X float32
	Y float32
	Z float32
}

func (b0 Coord_builder) Build() *Coord {
	m0 := &Coord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_X = b.X
	x.xxx_hidden_Y = b.Y
	x.xxx_hidden_Z = b.Z
	return m0
}

type IntCoord struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_X  int32                  `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	xxx_hidden_Y  int32                  `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	xxx_hidden_Z  int32                  `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntCoord) Reset() {
	*x = IntCoord{}
	mi := &file_server_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntCoord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntCoord) ProtoMessage() {}

func (x *IntCoord) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IntCoord) GetX() int32 {
	if x != nil {
		return x.xxx_hidden_X
	}
	return 0
}

func (x *IntCoord) GetY() int32 {
	if x != nil {
		return x.xxx_hidden_Y
	}
	return 0
}

func (x *IntCoord) GetZ() int32 {
	if x != nil {
		return x.xxx_hidden_Z
	}
	return 0
}

func (x *IntCoord) SetX(v int32) {
	x.xxx_hidden_X = v
}

func (x *IntCoord) SetY(v int32) {
	x.xxx_hidden_Y = v
}

func (x *IntCoord) SetZ(v int32) {
	x.xxx_hidden_Z = v
}

type IntCoord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	X int32
	Y int32
	Z int32
}

func (b0 IntCoord_builder) Build() *IntCoord {
	m0 := &IntCoord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_X = b.X
	x.xxx_hidden_Y = b.Y
	x.xxx_hidden_Z = b.Z
	return m0
}

type Line struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Entity int32                  `protobuf:"varint,1,opt,name=entity" json:"entity,omitempty"`
	xxx_hidden_Start  *Coord                 `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	xxx_hidden_End    *Coord                 `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Line) Reset() {
	*x = Line{}
	mi := &file_server_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Line) GetEntity() int32 {
	if x != nil {
		return x.xxx_hidden_Entity
	}
	return 0
}

func (x *Line) GetStart() *Coord {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return nil
}

func (x *Line) GetEnd() *Coord {
	if x != nil {
		return x.xxx_hidden_End
	}
	return nil
}

func (x *Line) SetEntity(v int32) {
	x.xxx_hidden_Entity = v
}

func (x *Line) SetStart(v *Coord) {
	x.xxx_hidden_Start = v
}

func (x *Line) SetEnd(v *Coord) {
	x.xxx_hidden_End = v
}

func (x *Line) HasStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Start != nil
}

func (x *Line) HasEnd() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_End != nil
}

func (x *Line) ClearStart() {
	x.xxx_hidden_Start = nil
}

func (x *Line) ClearEnd() {
	x.xxx_hidden_End = nil
}

type Line_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Entity int32
	Start  *Coord
	End    *Coord
}

func (b0 Line_builder) Build() *Line {
	m0 := &Line{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Entity = b.Entity
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_End = b.End
	return m0
}

type Explosion2 struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Position   *Coord                 `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	xxx_hidden_StartColor int32                  `protobuf:"varint,2,opt,name=start_color,json=startColor" json:"start_color,omitempty"`
	xxx_hidden_StopColor  int32                  `protobuf:"varint,3,opt,name=stop_color,json=stopColor" json:"stop_color,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Explosion2) Reset() {
	*x = Explosion2{}
	mi := &file_server_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Explosion2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Explosion2) ProtoMessage() {}

func (x *Explosion2) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Explosion2) GetPosition() *Coord {
	if x != nil {
		return x.xxx_hidden_Position
	}
	return nil
}

func (x *Explosion2) GetStartColor() int32 {
	if x != nil {
		return x.xxx_hidden_StartColor
	}
	return 0
}

func (x *Explosion2) GetStopColor() int32 {
	if x != nil {
		return x.xxx_hidden_StopColor
	}
	return 0
}

func (x *Explosion2) SetPosition(v *Coord) {
	x.xxx_hidden_Position = v
}

func (x *Explosion2) SetStartColor(v int32) {
	x.xxx_hidden_StartColor = v
}

func (x *Explosion2) SetStopColor(v int32) {
	x.xxx_hidden_StopColor = v
}

func (x *Explosion2) HasPosition() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Position != nil
}

func (x *Explosion2) ClearPosition() {
	x.xxx_hidden_Position = nil
}

type Explosion2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Position   *Coord
	StartColor int32
	StopColor  int32
}

func (b0 Explosion2_builder) Build() *Explosion2 {
	m0 := &Explosion2{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Position = b.Position
	x.xxx_hidden_StartColor = b.StartColor
	x.xxx_hidden_StopColor = b.StopColor
	return m0
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_server_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Empty_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Empty_builder) Build() *Empty {
	m0 := &Empty{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type TempEntity struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Union isTempEntity_Union     `protobuf_oneof:"union"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TempEntity) Reset() {
	*x = TempEntity{}
	mi := &file_server_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempEntity) ProtoMessage() {}

func (x *TempEntity) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TempEntity) GetSpike() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Spike); ok {
			return x.Spike
		}
	}
	return nil
}

func (x *TempEntity) GetSuperSpike() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_SuperSpike); ok {
			return x.SuperSpike
		}
	}
	return nil
}

func (x *TempEntity) GetGunshot() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Gunshot); ok {
			return x.Gunshot
		}
	}
	return nil
}

func (x *TempEntity) GetExplosion() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Explosion); ok {
			return x.Explosion
		}
	}
	return nil
}

func (x *TempEntity) GetTarExplosion() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_TarExplosion); ok {
			return x.TarExplosion
		}
	}
	return nil
}

func (x *TempEntity) GetLightning1() *Line {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Lightning1); ok {
			return x.Lightning1
		}
	}
	return nil
}

func (x *TempEntity) GetLightning2() *Line {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Lightning2); ok {
			return x.Lightning2
		}
	}
	return nil
}

func (x *TempEntity) GetWizSpike() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_WizSpike); ok {
			return x.WizSpike
		}
	}
	return nil
}

func (x *TempEntity) GetKnightSpike() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_KnightSpike); ok {
			return x.KnightSpike
		}
	}
	return nil
}

func (x *TempEntity) GetLightning3() *Line {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Lightning3); ok {
			return x.Lightning3
		}
	}
	return nil
}

func (x *TempEntity) GetLavaSplash() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_LavaSplash); ok {
			return x.LavaSplash
		}
	}
	return nil
}

func (x *TempEntity) GetTeleport() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Teleport); ok {
			return x.Teleport
		}
	}
	return nil
}

func (x *TempEntity) GetExplosion2() *Explosion2 {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Explosion2); ok {
			return x.Explosion2
		}
	}
	return nil
}

func (x *TempEntity) GetBeam() *Line {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*tempEntity_Beam); ok {
			return x.Beam
		}
	}
	return nil
}

func (x *TempEntity) SetSpike(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Spike{v}
}

func (x *TempEntity) SetSuperSpike(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_SuperSpike{v}
}

func (x *TempEntity) SetGunshot(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Gunshot{v}
}

func (x *TempEntity) SetExplosion(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Explosion{v}
}

func (x *TempEntity) SetTarExplosion(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_TarExplosion{v}
}

func (x *TempEntity) SetLightning1(v *Line) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Lightning1{v}
}

func (x *TempEntity) SetLightning2(v *Line) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Lightning2{v}
}

func (x *TempEntity) SetWizSpike(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_WizSpike{v}
}

func (x *TempEntity) SetKnightSpike(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_KnightSpike{v}
}

func (x *TempEntity) SetLightning3(v *Line) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Lightning3{v}
}

func (x *TempEntity) SetLavaSplash(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_LavaSplash{v}
}

func (x *TempEntity) SetTeleport(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Teleport{v}
}

func (x *TempEntity) SetExplosion2(v *Explosion2) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Explosion2{v}
}

func (x *TempEntity) SetBeam(v *Line) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &tempEntity_Beam{v}
}

func (x *TempEntity) HasUnion() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Union != nil
}

func (x *TempEntity) HasSpike() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Spike)
	return ok
}

func (x *TempEntity) HasSuperSpike() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_SuperSpike)
	return ok
}

func (x *TempEntity) HasGunshot() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Gunshot)
	return ok
}

func (x *TempEntity) HasExplosion() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Explosion)
	return ok
}

func (x *TempEntity) HasTarExplosion() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_TarExplosion)
	return ok
}

func (x *TempEntity) HasLightning1() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Lightning1)
	return ok
}

func (x *TempEntity) HasLightning2() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Lightning2)
	return ok
}

func (x *TempEntity) HasWizSpike() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_WizSpike)
	return ok
}

func (x *TempEntity) HasKnightSpike() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_KnightSpike)
	return ok
}

func (x *TempEntity) HasLightning3() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Lightning3)
	return ok
}

func (x *TempEntity) HasLavaSplash() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_LavaSplash)
	return ok
}

func (x *TempEntity) HasTeleport() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Teleport)
	return ok
}

func (x *TempEntity) HasExplosion2() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Explosion2)
	return ok
}

func (x *TempEntity) HasBeam() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*tempEntity_Beam)
	return ok
}

func (x *TempEntity) ClearUnion() {
	x.xxx_hidden_Union = nil
}

func (x *TempEntity) ClearSpike() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Spike); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearSuperSpike() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_SuperSpike); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearGunshot() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Gunshot); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearExplosion() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Explosion); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearTarExplosion() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_TarExplosion); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearLightning1() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Lightning1); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearLightning2() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Lightning2); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearWizSpike() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_WizSpike); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearKnightSpike() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_KnightSpike); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearLightning3() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Lightning3); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearLavaSplash() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_LavaSplash); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearTeleport() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Teleport); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearExplosion2() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Explosion2); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *TempEntity) ClearBeam() {
	if _, ok := x.xxx_hidden_Union.(*tempEntity_Beam); ok {
		x.xxx_hidden_Union = nil
	}
}

const TempEntity_Union_not_set_case case_TempEntity_Union = 0
const TempEntity_Spike_case case_TempEntity_Union = 1
const TempEntity_SuperSpike_case case_TempEntity_Union = 2
const TempEntity_Gunshot_case case_TempEntity_Union = 3
const TempEntity_Explosion_case case_TempEntity_Union = 4
const TempEntity_TarExplosion_case case_TempEntity_Union = 5
const TempEntity_Lightning1_case case_TempEntity_Union = 6
const TempEntity_Lightning2_case case_TempEntity_Union = 7
const TempEntity_WizSpike_case case_TempEntity_Union = 8
const TempEntity_KnightSpike_case case_TempEntity_Union = 9
const TempEntity_Lightning3_case case_TempEntity_Union = 10
const TempEntity_LavaSplash_case case_TempEntity_Union = 11
const TempEntity_Teleport_case case_TempEntity_Union = 12
const TempEntity_Explosion2_case case_TempEntity_Union = 13
const TempEntity_Beam_case case_TempEntity_Union = 14

func (x *TempEntity) WhichUnion() case_TempEntity_Union {
	if x == nil {
		return TempEntity_Union_not_set_case
	}
	switch x.xxx_hidden_Union.(type) {
	case *tempEntity_Spike:
		return TempEntity_Spike_case
	case *tempEntity_SuperSpike:
		return TempEntity_SuperSpike_case
	case *tempEntity_Gunshot:
		return TempEntity_Gunshot_case
	case *tempEntity_Explosion:
		return TempEntity_Explosion_case
	case *tempEntity_TarExplosion:
		return TempEntity_TarExplosion_case
	case *tempEntity_Lightning1:
		return TempEntity_Lightning1_case
	case *tempEntity_Lightning2:
		return TempEntity_Lightning2_case
	case *tempEntity_WizSpike:
		return TempEntity_WizSpike_case
	case *tempEntity_KnightSpike:
		return TempEntity_KnightSpike_case
	case *tempEntity_Lightning3:
		return TempEntity_Lightning3_case
	case *tempEntity_LavaSplash:
		return TempEntity_LavaSplash_case
	case *tempEntity_Teleport:
		return TempEntity_Teleport_case
	case *tempEntity_Explosion2:
		return TempEntity_Explosion2_case
	case *tempEntity_Beam:
		return TempEntity_Beam_case
	default:
		return TempEntity_Union_not_set_case
	}
}

type TempEntity_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Union:
	Spike        *Coord
	SuperSpike   *Coord
	Gunshot      *Coord
	Explosion    *Coord
	TarExplosion *Coord
	Lightning1   *Line
	Lightning2   *Line
	WizSpike     *Coord
	KnightSpike  *Coord
	Lightning3   *Line
	LavaSplash   *Coord
	Teleport     *Coord
	Explosion2   *Explosion2
	Beam         *Line
	// -- end of xxx_hidden_Union
}

func (b0 TempEntity_builder) Build() *TempEntity {
	m0 := &TempEntity{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Spike != nil {
		x.xxx_hidden_Union = &tempEntity_Spike{b.Spike}
	}
	if b.SuperSpike != nil {
		x.xxx_hidden_Union = &tempEntity_SuperSpike{b.SuperSpike}
	}
	if b.Gunshot != nil {
		x.xxx_hidden_Union = &tempEntity_Gunshot{b.Gunshot}
	}
	if b.Explosion != nil {
		x.xxx_hidden_Union = &tempEntity_Explosion{b.Explosion}
	}
	if b.TarExplosion != nil {
		x.xxx_hidden_Union = &tempEntity_TarExplosion{b.TarExplosion}
	}
	if b.Lightning1 != nil {
		x.xxx_hidden_Union = &tempEntity_Lightning1{b.Lightning1}
	}
	if b.Lightning2 != nil {
		x.xxx_hidden_Union = &tempEntity_Lightning2{b.Lightning2}
	}
	if b.WizSpike != nil {
		x.xxx_hidden_Union = &tempEntity_WizSpike{b.WizSpike}
	}
	if b.KnightSpike != nil {
		x.xxx_hidden_Union = &tempEntity_KnightSpike{b.KnightSpike}
	}
	if b.Lightning3 != nil {
		x.xxx_hidden_Union = &tempEntity_Lightning3{b.Lightning3}
	}
	if b.LavaSplash != nil {
		x.xxx_hidden_Union = &tempEntity_LavaSplash{b.LavaSplash}
	}
	if b.Teleport != nil {
		x.xxx_hidden_Union = &tempEntity_Teleport{b.Teleport}
	}
	if b.Explosion2 != nil {
		x.xxx_hidden_Union = &tempEntity_Explosion2{b.Explosion2}
	}
	if b.Beam != nil {
		x.xxx_hidden_Union = &tempEntity_Beam{b.Beam}
	}
	return m0
}

type case_TempEntity_Union protoreflect.FieldNumber

func (x case_TempEntity_Union) String() string {
	md := file_server_message_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTempEntity_Union interface {
	isTempEntity_Union()
}

type tempEntity_Spike struct {
	Spike *Coord `protobuf:"bytes,1,opt,name=spike,oneof"`
}

type tempEntity_SuperSpike struct {
	SuperSpike *Coord `protobuf:"bytes,2,opt,name=super_spike,json=superSpike,oneof"`
}

type tempEntity_Gunshot struct {
	Gunshot *Coord `protobuf:"bytes,3,opt,name=gunshot,oneof"`
}

type tempEntity_Explosion struct {
	Explosion *Coord `protobuf:"bytes,4,opt,name=explosion,oneof"`
}

type tempEntity_TarExplosion struct {
	TarExplosion *Coord `protobuf:"bytes,5,opt,name=tar_explosion,json=tarExplosion,oneof"`
}

type tempEntity_Lightning1 struct {
	Lightning1 *Line `protobuf:"bytes,6,opt,name=lightning1,oneof"`
}

type tempEntity_Lightning2 struct {
	Lightning2 *Line `protobuf:"bytes,7,opt,name=lightning2,oneof"`
}

type tempEntity_WizSpike struct {
	WizSpike *Coord `protobuf:"bytes,8,opt,name=wiz_spike,json=wizSpike,oneof"`
}

type tempEntity_KnightSpike struct {
	KnightSpike *Coord `protobuf:"bytes,9,opt,name=knight_spike,json=knightSpike,oneof"`
}

type tempEntity_Lightning3 struct {
	Lightning3 *Line `protobuf:"bytes,10,opt,name=lightning3,oneof"`
}

type tempEntity_LavaSplash struct {
	LavaSplash *Coord `protobuf:"bytes,11,opt,name=lava_splash,json=lavaSplash,oneof"`
}

type tempEntity_Teleport struct {
	Teleport *Coord `protobuf:"bytes,12,opt,name=teleport,oneof"`
}

type tempEntity_Explosion2 struct {
	Explosion2 *Explosion2 `protobuf:"bytes,13,opt,name=explosion2,oneof"`
}

type tempEntity_Beam struct {
	Beam *Line `protobuf:"bytes,14,opt,name=beam,oneof"`
}

func (*tempEntity_Spike) isTempEntity_Union() {}

func (*tempEntity_SuperSpike) isTempEntity_Union() {}

func (*tempEntity_Gunshot) isTempEntity_Union() {}

func (*tempEntity_Explosion) isTempEntity_Union() {}

func (*tempEntity_TarExplosion) isTempEntity_Union() {}

func (*tempEntity_Lightning1) isTempEntity_Union() {}

func (*tempEntity_Lightning2) isTempEntity_Union() {}

func (*tempEntity_WizSpike) isTempEntity_Union() {}

func (*tempEntity_KnightSpike) isTempEntity_Union() {}

func (*tempEntity_Lightning3) isTempEntity_Union() {}

func (*tempEntity_LavaSplash) isTempEntity_Union() {}

func (*tempEntity_Teleport) isTempEntity_Union() {}

func (*tempEntity_Explosion2) isTempEntity_Union() {}

func (*tempEntity_Beam) isTempEntity_Union() {}

type LightStyle struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Idx      int32                  `protobuf:"varint,1,opt,name=idx" json:"idx,omitempty"`
	xxx_hidden_NewStyle string                 `protobuf:"bytes,2,opt,name=new_style,json=newStyle" json:"new_style,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LightStyle) Reset() {
	*x = LightStyle{}
	mi := &file_server_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightStyle) ProtoMessage() {}

func (x *LightStyle) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LightStyle) GetIdx() int32 {
	if x != nil {
		return x.xxx_hidden_Idx
	}
	return 0
}

func (x *LightStyle) GetNewStyle() string {
	if x != nil {
		return x.xxx_hidden_NewStyle
	}
	return ""
}

func (x *LightStyle) SetIdx(v int32) {
	x.xxx_hidden_Idx = v
}

func (x *LightStyle) SetNewStyle(v string) {
	x.xxx_hidden_NewStyle = v
}

type LightStyle_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Idx      int32
	NewStyle string
}

func (b0 LightStyle_builder) Build() *LightStyle {
	m0 := &LightStyle{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Idx = b.Idx
	x.xxx_hidden_NewStyle = b.NewStyle
	return m0
}

type Sound struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Volume      int32                  `protobuf:"varint,1,opt,name=volume" json:"volume,omitempty"`
	xxx_hidden_Attenuation int32                  `protobuf:"varint,2,opt,name=attenuation" json:"attenuation,omitempty"`
	xxx_hidden_Entity      int32                  `protobuf:"varint,3,opt,name=entity" json:"entity,omitempty"`
	xxx_hidden_Channel     int32                  `protobuf:"varint,4,opt,name=channel" json:"channel,omitempty"`
	xxx_hidden_SoundNum    int32                  `protobuf:"varint,5,opt,name=sound_num,json=soundNum" json:"sound_num,omitempty"`
	xxx_hidden_Origin      *Coord                 `protobuf:"bytes,6,opt,name=origin" json:"origin,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Sound) Reset() {
	*x = Sound{}
	mi := &file_server_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sound) ProtoMessage() {}

func (x *Sound) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Sound) GetVolume() int32 {
	if x != nil {
		return x.xxx_hidden_Volume
	}
	return 0
}

func (x *Sound) GetAttenuation() int32 {
	if x != nil {
		return x.xxx_hidden_Attenuation
	}
	return 0
}

func (x *Sound) GetEntity() int32 {
	if x != nil {
		return x.xxx_hidden_Entity
	}
	return 0
}

func (x *Sound) GetChannel() int32 {
	if x != nil {
		return x.xxx_hidden_Channel
	}
	return 0
}

func (x *Sound) GetSoundNum() int32 {
	if x != nil {
		return x.xxx_hidden_SoundNum
	}
	return 0
}

func (x *Sound) GetOrigin() *Coord {
	if x != nil {
		return x.xxx_hidden_Origin
	}
	return nil
}

func (x *Sound) SetVolume(v int32) {
	x.xxx_hidden_Volume = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *Sound) SetAttenuation(v int32) {
	x.xxx_hidden_Attenuation = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *Sound) SetEntity(v int32) {
	x.xxx_hidden_Entity = v
}

func (x *Sound) SetChannel(v int32) {
	x.xxx_hidden_Channel = v
}

func (x *Sound) SetSoundNum(v int32) {
	x.xxx_hidden_SoundNum = v
}

func (x *Sound) SetOrigin(v *Coord) {
	x.xxx_hidden_Origin = v
}

func (x *Sound) HasVolume() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Sound) HasAttenuation() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Sound) HasOrigin() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Origin != nil
}

func (x *Sound) ClearVolume() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Volume = 0
}

func (x *Sound) ClearAttenuation() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Attenuation = 0
}

func (x *Sound) ClearOrigin() {
	x.xxx_hidden_Origin = nil
}

type Sound_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Volume      *int32
	Attenuation *int32
	Entity      int32
	Channel     int32
	SoundNum    int32
	Origin      *Coord
}

func (b0 Sound_builder) Build() *Sound {
	m0 := &Sound{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Volume != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Volume = *b.Volume
	}
	if b.Attenuation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Attenuation = *b.Attenuation
	}
	x.xxx_hidden_Entity = b.Entity
	x.xxx_hidden_Channel = b.Channel
	x.xxx_hidden_SoundNum = b.SoundNum
	x.xxx_hidden_Origin = b.Origin
	return m0
}

type UpdateName struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Player  int32                  `protobuf:"varint,1,opt,name=player" json:"player,omitempty"`
	xxx_hidden_NewName string                 `protobuf:"bytes,2,opt,name=new_name,json=newName" json:"new_name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateName) Reset() {
	*x = UpdateName{}
	mi := &file_server_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateName) ProtoMessage() {}

func (x *UpdateName) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateName) GetPlayer() int32 {
	if x != nil {
		return x.xxx_hidden_Player
	}
	return 0
}

func (x *UpdateName) GetNewName() string {
	if x != nil {
		return x.xxx_hidden_NewName
	}
	return ""
}

func (x *UpdateName) SetPlayer(v int32) {
	x.xxx_hidden_Player = v
}

func (x *UpdateName) SetNewName(v string) {
	x.xxx_hidden_NewName = v
}

type UpdateName_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Player  int32
	NewName string
}

func (b0 UpdateName_builder) Build() *UpdateName {
	m0 := &UpdateName{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Player = b.Player
	x.xxx_hidden_NewName = b.NewName
	return m0
}

type UpdateFrags struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Player   int32                  `protobuf:"varint,1,opt,name=player" json:"player,omitempty"`
	xxx_hidden_NewFrags int32                  `protobuf:"varint,2,opt,name=new_frags,json=newFrags" json:"new_frags,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateFrags) Reset() {
	*x = UpdateFrags{}
	mi := &file_server_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFrags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFrags) ProtoMessage() {}

func (x *UpdateFrags) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateFrags) GetPlayer() int32 {
	if x != nil {
		return x.xxx_hidden_Player
	}
	return 0
}

func (x *UpdateFrags) GetNewFrags() int32 {
	if x != nil {
		return x.xxx_hidden_NewFrags
	}
	return 0
}

func (x *UpdateFrags) SetPlayer(v int32) {
	x.xxx_hidden_Player = v
}

func (x *UpdateFrags) SetNewFrags(v int32) {
	x.xxx_hidden_NewFrags = v
}

type UpdateFrags_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Player   int32
	NewFrags int32
}

func (b0 UpdateFrags_builder) Build() *UpdateFrags {
	m0 := &UpdateFrags{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Player = b.Player
	x.xxx_hidden_NewFrags = b.NewFrags
	return m0
}

type UpdateColors struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Player   int32                  `protobuf:"varint,1,opt,name=player" json:"player,omitempty"`
	xxx_hidden_NewColor int32                  `protobuf:"varint,2,opt,name=new_color,json=newColor" json:"new_color,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateColors) Reset() {
	*x = UpdateColors{}
	mi := &file_server_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColors) ProtoMessage() {}

func (x *UpdateColors) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateColors) GetPlayer() int32 {
	if x != nil {
		return x.xxx_hidden_Player
	}
	return 0
}

func (x *UpdateColors) GetNewColor() int32 {
	if x != nil {
		return x.xxx_hidden_NewColor
	}
	return 0
}

func (x *UpdateColors) SetPlayer(v int32) {
	x.xxx_hidden_Player = v
}

func (x *UpdateColors) SetNewColor(v int32) {
	x.xxx_hidden_NewColor = v
}

type UpdateColors_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Player   int32
	NewColor int32
}

func (b0 UpdateColors_builder) Build() *UpdateColors {
	m0 := &UpdateColors{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Player = b.Player
	x.xxx_hidden_NewColor = b.NewColor
	return m0
}

type ClientData struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ViewHeight   int32                  `protobuf:"varint,1,opt,name=view_height,json=viewHeight" json:"view_height,omitempty"`
	xxx_hidden_IdealPitch   int32                  `protobuf:"varint,2,opt,name=ideal_pitch,json=idealPitch" json:"ideal_pitch,omitempty"`
	xxx_hidden_PunchAngle   *IntCoord              `protobuf:"bytes,3,opt,name=punch_angle,json=punchAngle" json:"punch_angle,omitempty"`
	xxx_hidden_Velocity     *IntCoord              `protobuf:"bytes,4,opt,name=velocity" json:"velocity,omitempty"`
	xxx_hidden_Items        uint32                 `protobuf:"fixed32,5,opt,name=items" json:"items,omitempty"`
	xxx_hidden_OnGround     bool                   `protobuf:"varint,6,opt,name=on_ground,json=onGround" json:"on_ground,omitempty"`
	xxx_hidden_InWater      bool                   `protobuf:"varint,7,opt,name=in_water,json=inWater" json:"in_water,omitempty"`
	xxx_hidden_WeaponFrame  int32                  `protobuf:"varint,8,opt,name=weapon_frame,json=weaponFrame" json:"weapon_frame,omitempty"`
	xxx_hidden_Armor        int32                  `protobuf:"varint,9,opt,name=armor" json:"armor,omitempty"`
	xxx_hidden_Weapon       int32                  `protobuf:"varint,10,opt,name=weapon" json:"weapon,omitempty"`
	xxx_hidden_Health       int32                  `protobuf:"varint,11,opt,name=health" json:"health,omitempty"`
	xxx_hidden_Ammo         int32                  `protobuf:"varint,12,opt,name=ammo" json:"ammo,omitempty"`
	xxx_hidden_Shells       int32                  `protobuf:"varint,13,opt,name=shells" json:"shells,omitempty"`
	xxx_hidden_Nails        int32                  `protobuf:"varint,14,opt,name=nails" json:"nails,omitempty"`
	xxx_hidden_Rockets      int32                  `protobuf:"varint,15,opt,name=rockets" json:"rockets,omitempty"`
	xxx_hidden_Cells        int32                  `protobuf:"varint,16,opt,name=cells" json:"cells,omitempty"`
	xxx_hidden_ActiveWeapon int32                  `protobuf:"varint,17,opt,name=active_weapon,json=activeWeapon" json:"active_weapon,omitempty"`
	xxx_hidden_WeaponAlpha  int32                  `protobuf:"varint,18,opt,name=weapon_alpha,json=weaponAlpha" json:"weapon_alpha,omitempty"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ClientData) Reset() {
	*x = ClientData{}
	mi := &file_server_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientData) ProtoMessage() {}

func (x *ClientData) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClientData) GetViewHeight() int32 {
	if x != nil {
		return x.xxx_hidden_ViewHeight
	}
	return 0
}

func (x *ClientData) GetIdealPitch() int32 {
	if x != nil {
		return x.xxx_hidden_IdealPitch
	}
	return 0
}

func (x *ClientData) GetPunchAngle() *IntCoord {
	if x != nil {
		return x.xxx_hidden_PunchAngle
	}
	return nil
}

func (x *ClientData) GetVelocity() *IntCoord {
	if x != nil {
		return x.xxx_hidden_Velocity
	}
	return nil
}

func (x *ClientData) GetItems() uint32 {
	if x != nil {
		return x.xxx_hidden_Items
	}
	return 0
}

func (x *ClientData) GetOnGround() bool {
	if x != nil {
		return x.xxx_hidden_OnGround
	}
	return false
}

func (x *ClientData) GetInWater() bool {
	if x != nil {
		return x.xxx_hidden_InWater
	}
	return false
}

func (x *ClientData) GetWeaponFrame() int32 {
	if x != nil {
		return x.xxx_hidden_WeaponFrame
	}
	return 0
}

func (x *ClientData) GetArmor() int32 {
	if x != nil {
		return x.xxx_hidden_Armor
	}
	return 0
}

func (x *ClientData) GetWeapon() int32 {
	if x != nil {
		return x.xxx_hidden_Weapon
	}
	return 0
}

func (x *ClientData) GetHealth() int32 {
	if x != nil {
		return x.xxx_hidden_Health
	}
	return 0
}

func (x *ClientData) GetAmmo() int32 {
	if x != nil {
		return x.xxx_hidden_Ammo
	}
	return 0
}

func (x *ClientData) GetShells() int32 {
	if x != nil {
		return x.xxx_hidden_Shells
	}
	return 0
}

func (x *ClientData) GetNails() int32 {
	if x != nil {
		return x.xxx_hidden_Nails
	}
	return 0
}

func (x *ClientData) GetRockets() int32 {
	if x != nil {
		return x.xxx_hidden_Rockets
	}
	return 0
}

func (x *ClientData) GetCells() int32 {
	if x != nil {
		return x.xxx_hidden_Cells
	}
	return 0
}

func (x *ClientData) GetActiveWeapon() int32 {
	if x != nil {
		return x.xxx_hidden_ActiveWeapon
	}
	return 0
}

func (x *ClientData) GetWeaponAlpha() int32 {
	if x != nil {
		return x.xxx_hidden_WeaponAlpha
	}
	return 0
}

func (x *ClientData) SetViewHeight(v int32) {
	x.xxx_hidden_ViewHeight = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 18)
}

func (x *ClientData) SetIdealPitch(v int32) {
	x.xxx_hidden_IdealPitch = v
}

func (x *ClientData) SetPunchAngle(v *IntCoord) {
	x.xxx_hidden_PunchAngle = v
}

func (x *ClientData) SetVelocity(v *IntCoord) {
	x.xxx_hidden_Velocity = v
}

func (x *ClientData) SetItems(v uint32) {
	x.xxx_hidden_Items = v
}

func (x *ClientData) SetOnGround(v bool) {
	x.xxx_hidden_OnGround = v
}

func (x *ClientData) SetInWater(v bool) {
	x.xxx_hidden_InWater = v
}

func (x *ClientData) SetWeaponFrame(v int32) {
	x.xxx_hidden_WeaponFrame = v
}

func (x *ClientData) SetArmor(v int32) {
	x.xxx_hidden_Armor = v
}

func (x *ClientData) SetWeapon(v int32) {
	x.xxx_hidden_Weapon = v
}

func (x *ClientData) SetHealth(v int32) {
	x.xxx_hidden_Health = v
}

func (x *ClientData) SetAmmo(v int32) {
	x.xxx_hidden_Ammo = v
}

func (x *ClientData) SetShells(v int32) {
	x.xxx_hidden_Shells = v
}

func (x *ClientData) SetNails(v int32) {
	x.xxx_hidden_Nails = v
}

func (x *ClientData) SetRockets(v int32) {
	x.xxx_hidden_Rockets = v
}

func (x *ClientData) SetCells(v int32) {
	x.xxx_hidden_Cells = v
}

func (x *ClientData) SetActiveWeapon(v int32) {
	x.xxx_hidden_ActiveWeapon = v
}

func (x *ClientData) SetWeaponAlpha(v int32) {
	x.xxx_hidden_WeaponAlpha = v
}

func (x *ClientData) HasViewHeight() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ClientData) HasPunchAngle() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PunchAngle != nil
}

func (x *ClientData) HasVelocity() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Velocity != nil
}

func (x *ClientData) ClearViewHeight() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ViewHeight = 0
}

func (x *ClientData) ClearPunchAngle() {
	x.xxx_hidden_PunchAngle = nil
}

func (x *ClientData) ClearVelocity() {
	x.xxx_hidden_Velocity = nil
}

type ClientData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ViewHeight   *int32
	IdealPitch   int32
	PunchAngle   *IntCoord
	Velocity     *IntCoord
	Items        uint32
	OnGround     bool
	InWater      bool
	WeaponFrame  int32
	Armor        int32
	Weapon       int32
	Health       int32
	Ammo         int32
	Shells       int32
	Nails        int32
	Rockets      int32
	Cells        int32
	ActiveWeapon int32
	WeaponAlpha  int32
}

func (b0 ClientData_builder) Build() *ClientData {
	m0 := &ClientData{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ViewHeight != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 18)
		x.xxx_hidden_ViewHeight = *b.ViewHeight
	}
	x.xxx_hidden_IdealPitch = b.IdealPitch
	x.xxx_hidden_PunchAngle = b.PunchAngle
	x.xxx_hidden_Velocity = b.Velocity
	x.xxx_hidden_Items = b.Items
	x.xxx_hidden_OnGround = b.OnGround
	x.xxx_hidden_InWater = b.InWater
	x.xxx_hidden_WeaponFrame = b.WeaponFrame
	x.xxx_hidden_Armor = b.Armor
	x.xxx_hidden_Weapon = b.Weapon
	x.xxx_hidden_Health = b.Health
	x.xxx_hidden_Ammo = b.Ammo
	x.xxx_hidden_Shells = b.Shells
	x.xxx_hidden_Nails = b.Nails
	x.xxx_hidden_Rockets = b.Rockets
	x.xxx_hidden_Cells = b.Cells
	x.xxx_hidden_ActiveWeapon = b.ActiveWeapon
	x.xxx_hidden_WeaponAlpha = b.WeaponAlpha
	return m0
}

type Baseline struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ModelIndex int32                  `protobuf:"varint,1,opt,name=model_index,json=modelIndex" json:"model_index,omitempty"`
	xxx_hidden_Frame      int32                  `protobuf:"varint,2,opt,name=frame" json:"frame,omitempty"`
	xxx_hidden_ColorMap   int32                  `protobuf:"varint,3,opt,name=color_map,json=colorMap" json:"color_map,omitempty"`
	xxx_hidden_Skin       int32                  `protobuf:"varint,4,opt,name=skin" json:"skin,omitempty"`
	xxx_hidden_Origin     *Coord                 `protobuf:"bytes,5,opt,name=origin" json:"origin,omitempty"`
	xxx_hidden_Angles     *Coord                 `protobuf:"bytes,6,opt,name=angles" json:"angles,omitempty"`
	xxx_hidden_Alpha      int32                  `protobuf:"varint,7,opt,name=alpha" json:"alpha,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Baseline) Reset() {
	*x = Baseline{}
	mi := &file_server_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Baseline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Baseline) ProtoMessage() {}

func (x *Baseline) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Baseline) GetModelIndex() int32 {
	if x != nil {
		return x.xxx_hidden_ModelIndex
	}
	return 0
}

func (x *Baseline) GetFrame() int32 {
	if x != nil {
		return x.xxx_hidden_Frame
	}
	return 0
}

func (x *Baseline) GetColorMap() int32 {
	if x != nil {
		return x.xxx_hidden_ColorMap
	}
	return 0
}

func (x *Baseline) GetSkin() int32 {
	if x != nil {
		return x.xxx_hidden_Skin
	}
	return 0
}

func (x *Baseline) GetOrigin() *Coord {
	if x != nil {
		return x.xxx_hidden_Origin
	}
	return nil
}

func (x *Baseline) GetAngles() *Coord {
	if x != nil {
		return x.xxx_hidden_Angles
	}
	return nil
}

func (x *Baseline) GetAlpha() int32 {
	if x != nil {
		return x.xxx_hidden_Alpha
	}
	return 0
}

func (x *Baseline) SetModelIndex(v int32) {
	x.xxx_hidden_ModelIndex = v
}

func (x *Baseline) SetFrame(v int32) {
	x.xxx_hidden_Frame = v
}

func (x *Baseline) SetColorMap(v int32) {
	x.xxx_hidden_ColorMap = v
}

func (x *Baseline) SetSkin(v int32) {
	x.xxx_hidden_Skin = v
}

func (x *Baseline) SetOrigin(v *Coord) {
	x.xxx_hidden_Origin = v
}

func (x *Baseline) SetAngles(v *Coord) {
	x.xxx_hidden_Angles = v
}

func (x *Baseline) SetAlpha(v int32) {
	x.xxx_hidden_Alpha = v
}

func (x *Baseline) HasOrigin() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Origin != nil
}

func (x *Baseline) HasAngles() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Angles != nil
}

func (x *Baseline) ClearOrigin() {
	x.xxx_hidden_Origin = nil
}

func (x *Baseline) ClearAngles() {
	x.xxx_hidden_Angles = nil
}

type Baseline_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ModelIndex int32
	Frame      int32
	ColorMap   int32
	Skin       int32
	Origin     *Coord
	Angles     *Coord
	Alpha      int32
}

func (b0 Baseline_builder) Build() *Baseline {
	m0 := &Baseline{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ModelIndex = b.ModelIndex
	x.xxx_hidden_Frame = b.Frame
	x.xxx_hidden_ColorMap = b.ColorMap
	x.xxx_hidden_Skin = b.Skin
	x.xxx_hidden_Origin = b.Origin
	x.xxx_hidden_Angles = b.Angles
	x.xxx_hidden_Alpha = b.Alpha
	return m0
}

type EntityBaseline struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Index    int32                  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	xxx_hidden_Baseline *Baseline              `protobuf:"bytes,2,opt,name=baseline" json:"baseline,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EntityBaseline) Reset() {
	*x = EntityBaseline{}
	mi := &file_server_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityBaseline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityBaseline) ProtoMessage() {}

func (x *EntityBaseline) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EntityBaseline) GetIndex() int32 {
	if x != nil {
		return x.xxx_hidden_Index
	}
	return 0
}

func (x *EntityBaseline) GetBaseline() *Baseline {
	if x != nil {
		return x.xxx_hidden_Baseline
	}
	return nil
}

func (x *EntityBaseline) SetIndex(v int32) {
	x.xxx_hidden_Index = v
}

func (x *EntityBaseline) SetBaseline(v *Baseline) {
	x.xxx_hidden_Baseline = v
}

func (x *EntityBaseline) HasBaseline() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Baseline != nil
}

func (x *EntityBaseline) ClearBaseline() {
	x.xxx_hidden_Baseline = nil
}

type EntityBaseline_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Index    int32
	Baseline *Baseline
}

func (b0 EntityBaseline_builder) Build() *EntityBaseline {
	m0 := &EntityBaseline{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Index = b.Index
	x.xxx_hidden_Baseline = b.Baseline
	return m0
}

type ServerInfo struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Protocol      int32                  `protobuf:"varint,1,opt,name=protocol" json:"protocol,omitempty"`
	xxx_hidden_Flags         int32                  `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	xxx_hidden_MaxClients    int32                  `protobuf:"varint,3,opt,name=max_clients,json=maxClients" json:"max_clients,omitempty"`
	xxx_hidden_GameType      int32                  `protobuf:"varint,4,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	xxx_hidden_LevelName     string                 `protobuf:"bytes,5,opt,name=level_name,json=levelName" json:"level_name,omitempty"`
	xxx_hidden_ModelPrecache []string               `protobuf:"bytes,6,rep,name=model_precache,json=modelPrecache" json:"model_precache,omitempty"`
	xxx_hidden_SoundPrecache []string               `protobuf:"bytes,7,rep,name=sound_precache,json=soundPrecache" json:"sound_precache,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	mi := &file_server_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ServerInfo) GetProtocol() int32 {
	if x != nil {
		return x.xxx_hidden_Protocol
	}
	return 0
}

func (x *ServerInfo) GetFlags() int32 {
	if x != nil {
		return x.xxx_hidden_Flags
	}
	return 0
}

func (x *ServerInfo) GetMaxClients() int32 {
	if x != nil {
		return x.xxx_hidden_MaxClients
	}
	return 0
}

func (x *ServerInfo) GetGameType() int32 {
	if x != nil {
		return x.xxx_hidden_GameType
	}
	return 0
}

func (x *ServerInfo) GetLevelName() string {
	if x != nil {
		return x.xxx_hidden_LevelName
	}
	return ""
}

func (x *ServerInfo) GetModelPrecache() []string {
	if x != nil {
		return x.xxx_hidden_ModelPrecache
	}
	return nil
}

func (x *ServerInfo) GetSoundPrecache() []string {
	if x != nil {
		return x.xxx_hidden_SoundPrecache
	}
	return nil
}

func (x *ServerInfo) SetProtocol(v int32) {
	x.xxx_hidden_Protocol = v
}

func (x *ServerInfo) SetFlags(v int32) {
	x.xxx_hidden_Flags = v
}

func (x *ServerInfo) SetMaxClients(v int32) {
	x.xxx_hidden_MaxClients = v
}

func (x *ServerInfo) SetGameType(v int32) {
	x.xxx_hidden_GameType = v
}

func (x *ServerInfo) SetLevelName(v string) {
	x.xxx_hidden_LevelName = v
}

func (x *ServerInfo) SetModelPrecache(v []string) {
	x.xxx_hidden_ModelPrecache = v
}

func (x *ServerInfo) SetSoundPrecache(v []string) {
	x.xxx_hidden_SoundPrecache = v
}

type ServerInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Protocol      int32
	Flags         int32
	MaxClients    int32
	GameType      int32
	LevelName     string
	ModelPrecache []string
	SoundPrecache []string
}

func (b0 ServerInfo_builder) Build() *ServerInfo {
	m0 := &ServerInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Protocol = b.Protocol
	x.xxx_hidden_Flags = b.Flags
	x.xxx_hidden_MaxClients = b.MaxClients
	x.xxx_hidden_GameType = b.GameType
	x.xxx_hidden_LevelName = b.LevelName
	x.xxx_hidden_ModelPrecache = b.ModelPrecache
	x.xxx_hidden_SoundPrecache = b.SoundPrecache
	return m0
}

type EntityUpdate struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Entity       int32                  `protobuf:"varint,1,opt,name=entity" json:"entity,omitempty"`
	xxx_hidden_LerpMoveStep bool                   `protobuf:"varint,2,opt,name=lerp_move_step,json=lerpMoveStep" json:"lerp_move_step,omitempty"`
	xxx_hidden_Model        int32                  `protobuf:"varint,3,opt,name=model" json:"model,omitempty"`
	xxx_hidden_Frame        int32                  `protobuf:"varint,4,opt,name=frame" json:"frame,omitempty"`
	xxx_hidden_ColorMap     int32                  `protobuf:"varint,5,opt,name=color_map,json=colorMap" json:"color_map,omitempty"`
	xxx_hidden_Skin         int32                  `protobuf:"varint,6,opt,name=skin" json:"skin,omitempty"`
	xxx_hidden_Effects      int32                  `protobuf:"varint,7,opt,name=effects" json:"effects,omitempty"`
	xxx_hidden_OriginX      float32                `protobuf:"fixed32,8,opt,name=origin_x,json=originX" json:"origin_x,omitempty"`
	xxx_hidden_OriginY      float32                `protobuf:"fixed32,9,opt,name=origin_y,json=originY" json:"origin_y,omitempty"`
	xxx_hidden_OriginZ      float32                `protobuf:"fixed32,10,opt,name=origin_z,json=originZ" json:"origin_z,omitempty"`
	xxx_hidden_AngleX       float32                `protobuf:"fixed32,11,opt,name=angle_x,json=angleX" json:"angle_x,omitempty"`
	xxx_hidden_AngleY       float32                `protobuf:"fixed32,12,opt,name=angle_y,json=angleY" json:"angle_y,omitempty"`
	xxx_hidden_AngleZ       float32                `protobuf:"fixed32,13,opt,name=angle_z,json=angleZ" json:"angle_z,omitempty"`
	xxx_hidden_LerpFinish   int32                  `protobuf:"varint,14,opt,name=lerp_finish,json=lerpFinish" json:"lerp_finish,omitempty"`
	xxx_hidden_Alpha        int32                  `protobuf:"varint,15,opt,name=alpha" json:"alpha,omitempty"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EntityUpdate) Reset() {
	*x = EntityUpdate{}
	mi := &file_server_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityUpdate) ProtoMessage() {}

func (x *EntityUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EntityUpdate) GetEntity() int32 {
	if x != nil {
		return x.xxx_hidden_Entity
	}
	return 0
}

func (x *EntityUpdate) GetLerpMoveStep() bool {
	if x != nil {
		return x.xxx_hidden_LerpMoveStep
	}
	return false
}

func (x *EntityUpdate) GetModel() int32 {
	if x != nil {
		return x.xxx_hidden_Model
	}
	return 0
}

func (x *EntityUpdate) GetFrame() int32 {
	if x != nil {
		return x.xxx_hidden_Frame
	}
	return 0
}

func (x *EntityUpdate) GetColorMap() int32 {
	if x != nil {
		return x.xxx_hidden_ColorMap
	}
	return 0
}

func (x *EntityUpdate) GetSkin() int32 {
	if x != nil {
		return x.xxx_hidden_Skin
	}
	return 0
}

func (x *EntityUpdate) GetEffects() int32 {
	if x != nil {
		return x.xxx_hidden_Effects
	}
	return 0
}

func (x *EntityUpdate) GetOriginX() float32 {
	if x != nil {
		return x.xxx_hidden_OriginX
	}
	return 0
}

func (x *EntityUpdate) GetOriginY() float32 {
	if x != nil {
		return x.xxx_hidden_OriginY
	}
	return 0
}

func (x *EntityUpdate) GetOriginZ() float32 {
	if x != nil {
		return x.xxx_hidden_OriginZ
	}
	return 0
}

func (x *EntityUpdate) GetAngleX() float32 {
	if x != nil {
		return x.xxx_hidden_AngleX
	}
	return 0
}

func (x *EntityUpdate) GetAngleY() float32 {
	if x != nil {
		return x.xxx_hidden_AngleY
	}
	return 0
}

func (x *EntityUpdate) GetAngleZ() float32 {
	if x != nil {
		return x.xxx_hidden_AngleZ
	}
	return 0
}

func (x *EntityUpdate) GetLerpFinish() int32 {
	if x != nil {
		return x.xxx_hidden_LerpFinish
	}
	return 0
}

func (x *EntityUpdate) GetAlpha() int32 {
	if x != nil {
		return x.xxx_hidden_Alpha
	}
	return 0
}

func (x *EntityUpdate) SetEntity(v int32) {
	x.xxx_hidden_Entity = v
}

func (x *EntityUpdate) SetLerpMoveStep(v bool) {
	x.xxx_hidden_LerpMoveStep = v
}

func (x *EntityUpdate) SetModel(v int32) {
	x.xxx_hidden_Model = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 15)
}

func (x *EntityUpdate) SetFrame(v int32) {
	x.xxx_hidden_Frame = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 15)
}

func (x *EntityUpdate) SetColorMap(v int32) {
	x.xxx_hidden_ColorMap = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 15)
}

func (x *EntityUpdate) SetSkin(v int32) {
	x.xxx_hidden_Skin = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 15)
}

func (x *EntityUpdate) SetEffects(v int32) {
	x.xxx_hidden_Effects = v
}

func (x *EntityUpdate) SetOriginX(v float32) {
	x.xxx_hidden_OriginX = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 15)
}

func (x *EntityUpdate) SetOriginY(v float32) {
	x.xxx_hidden_OriginY = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 15)
}

func (x *EntityUpdate) SetOriginZ(v float32) {
	x.xxx_hidden_OriginZ = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 15)
}

func (x *EntityUpdate) SetAngleX(v float32) {
	x.xxx_hidden_AngleX = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 15)
}

func (x *EntityUpdate) SetAngleY(v float32) {
	x.xxx_hidden_AngleY = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 15)
}

func (x *EntityUpdate) SetAngleZ(v float32) {
	x.xxx_hidden_AngleZ = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 15)
}

func (x *EntityUpdate) SetLerpFinish(v int32) {
	x.xxx_hidden_LerpFinish = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 13, 15)
}

func (x *EntityUpdate) SetAlpha(v int32) {
	x.xxx_hidden_Alpha = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 15)
}

func (x *EntityUpdate) HasModel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EntityUpdate) HasFrame() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *EntityUpdate) HasColorMap() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *EntityUpdate) HasSkin() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *EntityUpdate) HasOriginX() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *EntityUpdate) HasOriginY() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *EntityUpdate) HasOriginZ() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *EntityUpdate) HasAngleX() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *EntityUpdate) HasAngleY() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *EntityUpdate) HasAngleZ() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *EntityUpdate) HasLerpFinish() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 13)
}

func (x *EntityUpdate) HasAlpha() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *EntityUpdate) ClearModel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Model = 0
}

func (x *EntityUpdate) ClearFrame() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Frame = 0
}

func (x *EntityUpdate) ClearColorMap() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ColorMap = 0
}

func (x *EntityUpdate) ClearSkin() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Skin = 0
}

func (x *EntityUpdate) ClearOriginX() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_OriginX = 0
}

func (x *EntityUpdate) ClearOriginY() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_OriginY = 0
}

func (x *EntityUpdate) ClearOriginZ() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_OriginZ = 0
}

func (x *EntityUpdate) ClearAngleX() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_AngleX = 0
}

func (x *EntityUpdate) ClearAngleY() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_AngleY = 0
}

func (x *EntityUpdate) ClearAngleZ() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_AngleZ = 0
}

func (x *EntityUpdate) ClearLerpFinish() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 13)
	x.xxx_hidden_LerpFinish = 0
}

func (x *EntityUpdate) ClearAlpha() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_Alpha = 0
}

type EntityUpdate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Entity       int32
	LerpMoveStep bool
	Model        *int32
	Frame        *int32
	ColorMap     *int32
	Skin         *int32
	Effects      int32
	OriginX      *float32
	OriginY      *float32
	OriginZ      *float32
	AngleX       *float32
	AngleY       *float32
	AngleZ       *float32
	LerpFinish   *int32
	Alpha        *int32
}

func (b0 EntityUpdate_builder) Build() *EntityUpdate {
	m0 := &EntityUpdate{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Entity = b.Entity
	x.xxx_hidden_LerpMoveStep = b.LerpMoveStep
	if b.Model != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 15)
		x.xxx_hidden_Model = *b.Model
	}
	if b.Frame != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 15)
		x.xxx_hidden_Frame = *b.Frame
	}
	if b.ColorMap != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 15)
		x.xxx_hidden_ColorMap = *b.ColorMap
	}
	if b.Skin != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 15)
		x.xxx_hidden_Skin = *b.Skin
	}
	x.xxx_hidden_Effects = b.Effects
	if b.OriginX != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 15)
		x.xxx_hidden_OriginX = *b.OriginX
	}
	if b.OriginY != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 15)
		x.xxx_hidden_OriginY = *b.OriginY
	}
	if b.OriginZ != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 15)
		x.xxx_hidden_OriginZ = *b.OriginZ
	}
	if b.AngleX != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 15)
		x.xxx_hidden_AngleX = *b.AngleX
	}
	if b.AngleY != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 15)
		x.xxx_hidden_AngleY = *b.AngleY
	}
	if b.AngleZ != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 15)
		x.xxx_hidden_AngleZ = *b.AngleZ
	}
	if b.LerpFinish != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 13, 15)
		x.xxx_hidden_LerpFinish = *b.LerpFinish
	}
	if b.Alpha != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 15)
		x.xxx_hidden_Alpha = *b.Alpha
	}
	return m0
}

type StaticSound struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Origin      *Coord                 `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	xxx_hidden_Index       int32                  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	xxx_hidden_Volume      int32                  `protobuf:"varint,3,opt,name=volume" json:"volume,omitempty"`
	xxx_hidden_Attenuation int32                  `protobuf:"varint,4,opt,name=attenuation" json:"attenuation,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StaticSound) Reset() {
	*x = StaticSound{}
	mi := &file_server_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticSound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticSound) ProtoMessage() {}

func (x *StaticSound) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StaticSound) GetOrigin() *Coord {
	if x != nil {
		return x.xxx_hidden_Origin
	}
	return nil
}

func (x *StaticSound) GetIndex() int32 {
	if x != nil {
		return x.xxx_hidden_Index
	}
	return 0
}

func (x *StaticSound) GetVolume() int32 {
	if x != nil {
		return x.xxx_hidden_Volume
	}
	return 0
}

func (x *StaticSound) GetAttenuation() int32 {
	if x != nil {
		return x.xxx_hidden_Attenuation
	}
	return 0
}

func (x *StaticSound) SetOrigin(v *Coord) {
	x.xxx_hidden_Origin = v
}

func (x *StaticSound) SetIndex(v int32) {
	x.xxx_hidden_Index = v
}

func (x *StaticSound) SetVolume(v int32) {
	x.xxx_hidden_Volume = v
}

func (x *StaticSound) SetAttenuation(v int32) {
	x.xxx_hidden_Attenuation = v
}

func (x *StaticSound) HasOrigin() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Origin != nil
}

func (x *StaticSound) ClearOrigin() {
	x.xxx_hidden_Origin = nil
}

type StaticSound_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Origin      *Coord
	Index       int32
	Volume      int32
	Attenuation int32
}

func (b0 StaticSound_builder) Build() *StaticSound {
	m0 := &StaticSound{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Origin = b.Origin
	x.xxx_hidden_Index = b.Index
	x.xxx_hidden_Volume = b.Volume
	x.xxx_hidden_Attenuation = b.Attenuation
	return m0
}

type Damage struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Armor    int32                  `protobuf:"varint,1,opt,name=armor" json:"armor,omitempty"`
	xxx_hidden_Blood    int32                  `protobuf:"varint,2,opt,name=blood" json:"blood,omitempty"`
	xxx_hidden_Position *Coord                 `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Damage) Reset() {
	*x = Damage{}
	mi := &file_server_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Damage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Damage) ProtoMessage() {}

func (x *Damage) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Damage) GetArmor() int32 {
	if x != nil {
		return x.xxx_hidden_Armor
	}
	return 0
}

func (x *Damage) GetBlood() int32 {
	if x != nil {
		return x.xxx_hidden_Blood
	}
	return 0
}

func (x *Damage) GetPosition() *Coord {
	if x != nil {
		return x.xxx_hidden_Position
	}
	return nil
}

func (x *Damage) SetArmor(v int32) {
	x.xxx_hidden_Armor = v
}

func (x *Damage) SetBlood(v int32) {
	x.xxx_hidden_Blood = v
}

func (x *Damage) SetPosition(v *Coord) {
	x.xxx_hidden_Position = v
}

func (x *Damage) HasPosition() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Position != nil
}

func (x *Damage) ClearPosition() {
	x.xxx_hidden_Position = nil
}

type Damage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Armor    int32
	Blood    int32
	Position *Coord
}

func (b0 Damage_builder) Build() *Damage {
	m0 := &Damage{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Armor = b.Armor
	x.xxx_hidden_Blood = b.Blood
	x.xxx_hidden_Position = b.Position
	return m0
}

type CDTrack struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TrackNumber int32                  `protobuf:"varint,1,opt,name=track_number,json=trackNumber" json:"track_number,omitempty"`
	xxx_hidden_LoopTrack   int32                  `protobuf:"varint,2,opt,name=loop_track,json=loopTrack" json:"loop_track,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CDTrack) Reset() {
	*x = CDTrack{}
	mi := &file_server_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDTrack) ProtoMessage() {}

func (x *CDTrack) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CDTrack) GetTrackNumber() int32 {
	if x != nil {
		return x.xxx_hidden_TrackNumber
	}
	return 0
}

func (x *CDTrack) GetLoopTrack() int32 {
	if x != nil {
		return x.xxx_hidden_LoopTrack
	}
	return 0
}

func (x *CDTrack) SetTrackNumber(v int32) {
	x.xxx_hidden_TrackNumber = v
}

func (x *CDTrack) SetLoopTrack(v int32) {
	x.xxx_hidden_LoopTrack = v
}

type CDTrack_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TrackNumber int32
	LoopTrack   int32
}

func (b0 CDTrack_builder) Build() *CDTrack {
	m0 := &CDTrack{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TrackNumber = b.TrackNumber
	x.xxx_hidden_LoopTrack = b.LoopTrack
	return m0
}

type UpdateStat struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Stat  int32                  `protobuf:"varint,1,opt,name=stat" json:"stat,omitempty"`
	xxx_hidden_Value int32                  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateStat) Reset() {
	*x = UpdateStat{}
	mi := &file_server_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStat) ProtoMessage() {}

func (x *UpdateStat) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateStat) GetStat() int32 {
	if x != nil {
		return x.xxx_hidden_Stat
	}
	return 0
}

func (x *UpdateStat) GetValue() int32 {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return 0
}

func (x *UpdateStat) SetStat(v int32) {
	x.xxx_hidden_Stat = v
}

func (x *UpdateStat) SetValue(v int32) {
	x.xxx_hidden_Value = v
}

type UpdateStat_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Stat  int32
	Value int32
}

func (b0 UpdateStat_builder) Build() *UpdateStat {
	m0 := &UpdateStat{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Stat = b.Stat
	x.xxx_hidden_Value = b.Value
	return m0
}

type Particle struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Origin    *Coord                 `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	xxx_hidden_Direction *Coord                 `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
	xxx_hidden_Count     int32                  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	xxx_hidden_Color     int32                  `protobuf:"varint,4,opt,name=color" json:"color,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Particle) Reset() {
	*x = Particle{}
	mi := &file_server_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Particle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Particle) ProtoMessage() {}

func (x *Particle) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Particle) GetOrigin() *Coord {
	if x != nil {
		return x.xxx_hidden_Origin
	}
	return nil
}

func (x *Particle) GetDirection() *Coord {
	if x != nil {
		return x.xxx_hidden_Direction
	}
	return nil
}

func (x *Particle) GetCount() int32 {
	if x != nil {
		return x.xxx_hidden_Count
	}
	return 0
}

func (x *Particle) GetColor() int32 {
	if x != nil {
		return x.xxx_hidden_Color
	}
	return 0
}

func (x *Particle) SetOrigin(v *Coord) {
	x.xxx_hidden_Origin = v
}

func (x *Particle) SetDirection(v *Coord) {
	x.xxx_hidden_Direction = v
}

func (x *Particle) SetCount(v int32) {
	x.xxx_hidden_Count = v
}

func (x *Particle) SetColor(v int32) {
	x.xxx_hidden_Color = v
}

func (x *Particle) HasOrigin() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Origin != nil
}

func (x *Particle) HasDirection() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Direction != nil
}

func (x *Particle) ClearOrigin() {
	x.xxx_hidden_Origin = nil
}

func (x *Particle) ClearDirection() {
	x.xxx_hidden_Direction = nil
}

type Particle_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Origin    *Coord
	Direction *Coord
	Count     int32
	Color     int32
}

func (b0 Particle_builder) Build() *Particle {
	m0 := &Particle{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Origin = b.Origin
	x.xxx_hidden_Direction = b.Direction
	x.xxx_hidden_Count = b.Count
	x.xxx_hidden_Color = b.Color
	return m0
}

type Fog struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Density float32                `protobuf:"fixed32,1,opt,name=density" json:"density,omitempty"`
	xxx_hidden_Red     float32                `protobuf:"fixed32,2,opt,name=red" json:"red,omitempty"`
	xxx_hidden_Green   float32                `protobuf:"fixed32,3,opt,name=green" json:"green,omitempty"`
	xxx_hidden_Blue    float32                `protobuf:"fixed32,4,opt,name=blue" json:"blue,omitempty"`
	xxx_hidden_Time    float32                `protobuf:"fixed32,5,opt,name=time" json:"time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Fog) Reset() {
	*x = Fog{}
	mi := &file_server_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fog) ProtoMessage() {}

func (x *Fog) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Fog) GetDensity() float32 {
	if x != nil {
		return x.xxx_hidden_Density
	}
	return 0
}

func (x *Fog) GetRed() float32 {
	if x != nil {
		return x.xxx_hidden_Red
	}
	return 0
}

func (x *Fog) GetGreen() float32 {
	if x != nil {
		return x.xxx_hidden_Green
	}
	return 0
}

func (x *Fog) GetBlue() float32 {
	if x != nil {
		return x.xxx_hidden_Blue
	}
	return 0
}

func (x *Fog) GetTime() float32 {
	if x != nil {
		return x.xxx_hidden_Time
	}
	return 0
}

func (x *Fog) SetDensity(v float32) {
	x.xxx_hidden_Density = v
}

func (x *Fog) SetRed(v float32) {
	x.xxx_hidden_Red = v
}

func (x *Fog) SetGreen(v float32) {
	x.xxx_hidden_Green = v
}

func (x *Fog) SetBlue(v float32) {
	x.xxx_hidden_Blue = v
}

func (x *Fog) SetTime(v float32) {
	x.xxx_hidden_Time = v
}

type Fog_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Density float32
	Red     float32
	Green   float32
	Blue    float32
	Time    float32
}

func (b0 Fog_builder) Build() *Fog {
	m0 := &Fog{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Density = b.Density
	x.xxx_hidden_Red = b.Red
	x.xxx_hidden_Green = b.Green
	x.xxx_hidden_Blue = b.Blue
	x.xxx_hidden_Time = b.Time
	return m0
}

type SCmd struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Union isSCmd_Union           `protobuf_oneof:"union"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SCmd) Reset() {
	*x = SCmd{}
	mi := &file_server_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCmd) ProtoMessage() {}

func (x *SCmd) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SCmd) GetDisconnect() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Disconnect); ok {
			return x.Disconnect
		}
	}
	return false
}

func (x *SCmd) GetEntityUpdate() *EntityUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_EntityUpdate); ok {
			return x.EntityUpdate
		}
	}
	return nil
}

func (x *SCmd) GetUpdateStat() *UpdateStat {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_UpdateStat); ok {
			return x.UpdateStat
		}
	}
	return nil
}

func (x *SCmd) GetVersion() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Version); ok {
			return x.Version
		}
	}
	return 0
}

func (x *SCmd) GetSetViewEntity() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SetViewEntity); ok {
			return x.SetViewEntity
		}
	}
	return 0
}

func (x *SCmd) GetSound() *Sound {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Sound); ok {
			return x.Sound
		}
	}
	return nil
}

func (x *SCmd) GetTime() float32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Time); ok {
			return x.Time
		}
	}
	return 0
}

func (x *SCmd) GetPrint() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Print); ok {
			return x.Print
		}
	}
	return ""
}

func (x *SCmd) GetStuffText() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_StuffText); ok {
			return x.StuffText
		}
	}
	return ""
}

func (x *SCmd) GetSetAngle() *Coord {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SetAngle); ok {
			return x.SetAngle
		}
	}
	return nil
}

func (x *SCmd) GetServerInfo() *ServerInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_ServerInfo); ok {
			return x.ServerInfo
		}
	}
	return nil
}

func (x *SCmd) GetLightStyle() *LightStyle {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_LightStyle); ok {
			return x.LightStyle
		}
	}
	return nil
}

func (x *SCmd) GetUpdateName() *UpdateName {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_UpdateName); ok {
			return x.UpdateName
		}
	}
	return nil
}

func (x *SCmd) GetUpdateFrags() *UpdateFrags {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_UpdateFrags); ok {
			return x.UpdateFrags
		}
	}
	return nil
}

func (x *SCmd) GetClientData() *ClientData {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_ClientData); ok {
			return x.ClientData
		}
	}
	return nil
}

func (x *SCmd) GetStopSound() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_StopSound); ok {
			return x.StopSound
		}
	}
	return 0
}

func (x *SCmd) GetUpdateColors() *UpdateColors {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_UpdateColors); ok {
			return x.UpdateColors
		}
	}
	return nil
}

func (x *SCmd) GetParticle() *Particle {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Particle); ok {
			return x.Particle
		}
	}
	return nil
}

func (x *SCmd) GetDamage() *Damage {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Damage); ok {
			return x.Damage
		}
	}
	return nil
}

func (x *SCmd) GetSpawnStatic() *Baseline {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SpawnStatic); ok {
			return x.SpawnStatic
		}
	}
	return nil
}

func (x *SCmd) GetSpawnBaseline() *EntityBaseline {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SpawnBaseline); ok {
			return x.SpawnBaseline
		}
	}
	return nil
}

func (x *SCmd) GetTempEntity() *TempEntity {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_TempEntity); ok {
			return x.TempEntity
		}
	}
	return nil
}

func (x *SCmd) GetSetPause() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SetPause); ok {
			return x.SetPause
		}
	}
	return false
}

func (x *SCmd) GetSignonNum() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SignonNum); ok {
			return x.SignonNum
		}
	}
	return 0
}

func (x *SCmd) GetCenterPrint() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_CenterPrint); ok {
			return x.CenterPrint
		}
	}
	return ""
}

func (x *SCmd) GetKilledMonster() *Empty {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_KilledMonster); ok {
			return x.KilledMonster
		}
	}
	return nil
}

func (x *SCmd) GetFoundSecret() *Empty {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_FoundSecret); ok {
			return x.FoundSecret
		}
	}
	return nil
}

func (x *SCmd) GetSpawnStaticSound() *StaticSound {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SpawnStaticSound); ok {
			return x.SpawnStaticSound
		}
	}
	return nil
}

func (x *SCmd) GetIntermission() *Empty {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Intermission); ok {
			return x.Intermission
		}
	}
	return nil
}

func (x *SCmd) GetFinale() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Finale); ok {
			return x.Finale
		}
	}
	return ""
}

func (x *SCmd) GetCdTrack() *CDTrack {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_CdTrack); ok {
			return x.CdTrack
		}
	}
	return nil
}

func (x *SCmd) GetSellScreen() *Empty {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_SellScreen); ok {
			return x.SellScreen
		}
	}
	return nil
}

func (x *SCmd) GetCutscene() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Cutscene); ok {
			return x.Cutscene
		}
	}
	return ""
}

func (x *SCmd) GetSkybox() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Skybox); ok {
			return x.Skybox
		}
	}
	return ""
}

func (x *SCmd) GetBackgroundFlash() *Empty {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_BackgroundFlash); ok {
			return x.BackgroundFlash
		}
	}
	return nil
}

func (x *SCmd) GetFog() *Fog {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Fog); ok {
			return x.Fog
		}
	}
	return nil
}

func (x *SCmd) GetAchievement() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Union.(*sCmd_Achievement); ok {
			return x.Achievement
		}
	}
	return ""
}

func (x *SCmd) SetDisconnect(v bool) {
	x.xxx_hidden_Union = &sCmd_Disconnect{v}
}

func (x *SCmd) SetEntityUpdate(v *EntityUpdate) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_EntityUpdate{v}
}

func (x *SCmd) SetUpdateStat(v *UpdateStat) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_UpdateStat{v}
}

func (x *SCmd) SetVersion(v int32) {
	x.xxx_hidden_Union = &sCmd_Version{v}
}

func (x *SCmd) SetSetViewEntity(v int32) {
	x.xxx_hidden_Union = &sCmd_SetViewEntity{v}
}

func (x *SCmd) SetSound(v *Sound) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_Sound{v}
}

func (x *SCmd) SetTime(v float32) {
	x.xxx_hidden_Union = &sCmd_Time{v}
}

func (x *SCmd) SetPrint(v string) {
	x.xxx_hidden_Union = &sCmd_Print{v}
}

func (x *SCmd) SetStuffText(v string) {
	x.xxx_hidden_Union = &sCmd_StuffText{v}
}

func (x *SCmd) SetSetAngle(v *Coord) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_SetAngle{v}
}

func (x *SCmd) SetServerInfo(v *ServerInfo) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_ServerInfo{v}
}

func (x *SCmd) SetLightStyle(v *LightStyle) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_LightStyle{v}
}

func (x *SCmd) SetUpdateName(v *UpdateName) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_UpdateName{v}
}

func (x *SCmd) SetUpdateFrags(v *UpdateFrags) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_UpdateFrags{v}
}

func (x *SCmd) SetClientData(v *ClientData) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_ClientData{v}
}

func (x *SCmd) SetStopSound(v int32) {
	x.xxx_hidden_Union = &sCmd_StopSound{v}
}

func (x *SCmd) SetUpdateColors(v *UpdateColors) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_UpdateColors{v}
}

func (x *SCmd) SetParticle(v *Particle) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_Particle{v}
}

func (x *SCmd) SetDamage(v *Damage) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_Damage{v}
}

func (x *SCmd) SetSpawnStatic(v *Baseline) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_SpawnStatic{v}
}

func (x *SCmd) SetSpawnBaseline(v *EntityBaseline) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_SpawnBaseline{v}
}

func (x *SCmd) SetTempEntity(v *TempEntity) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_TempEntity{v}
}

func (x *SCmd) SetSetPause(v bool) {
	x.xxx_hidden_Union = &sCmd_SetPause{v}
}

func (x *SCmd) SetSignonNum(v int32) {
	x.xxx_hidden_Union = &sCmd_SignonNum{v}
}

func (x *SCmd) SetCenterPrint(v string) {
	x.xxx_hidden_Union = &sCmd_CenterPrint{v}
}

func (x *SCmd) SetKilledMonster(v *Empty) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_KilledMonster{v}
}

func (x *SCmd) SetFoundSecret(v *Empty) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_FoundSecret{v}
}

func (x *SCmd) SetSpawnStaticSound(v *StaticSound) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_SpawnStaticSound{v}
}

func (x *SCmd) SetIntermission(v *Empty) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_Intermission{v}
}

func (x *SCmd) SetFinale(v string) {
	x.xxx_hidden_Union = &sCmd_Finale{v}
}

func (x *SCmd) SetCdTrack(v *CDTrack) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_CdTrack{v}
}

func (x *SCmd) SetSellScreen(v *Empty) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_SellScreen{v}
}

func (x *SCmd) SetCutscene(v string) {
	x.xxx_hidden_Union = &sCmd_Cutscene{v}
}

func (x *SCmd) SetSkybox(v string) {
	x.xxx_hidden_Union = &sCmd_Skybox{v}
}

func (x *SCmd) SetBackgroundFlash(v *Empty) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_BackgroundFlash{v}
}

func (x *SCmd) SetFog(v *Fog) {
	if v == nil {
		x.xxx_hidden_Union = nil
		return
	}
	x.xxx_hidden_Union = &sCmd_Fog{v}
}

func (x *SCmd) SetAchievement(v string) {
	x.xxx_hidden_Union = &sCmd_Achievement{v}
}

func (x *SCmd) HasUnion() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Union != nil
}

func (x *SCmd) HasDisconnect() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Disconnect)
	return ok
}

func (x *SCmd) HasEntityUpdate() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_EntityUpdate)
	return ok
}

func (x *SCmd) HasUpdateStat() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_UpdateStat)
	return ok
}

func (x *SCmd) HasVersion() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Version)
	return ok
}

func (x *SCmd) HasSetViewEntity() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SetViewEntity)
	return ok
}

func (x *SCmd) HasSound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Sound)
	return ok
}

func (x *SCmd) HasTime() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Time)
	return ok
}

func (x *SCmd) HasPrint() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Print)
	return ok
}

func (x *SCmd) HasStuffText() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_StuffText)
	return ok
}

func (x *SCmd) HasSetAngle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SetAngle)
	return ok
}

func (x *SCmd) HasServerInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_ServerInfo)
	return ok
}

func (x *SCmd) HasLightStyle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_LightStyle)
	return ok
}

func (x *SCmd) HasUpdateName() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_UpdateName)
	return ok
}

func (x *SCmd) HasUpdateFrags() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_UpdateFrags)
	return ok
}

func (x *SCmd) HasClientData() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_ClientData)
	return ok
}

func (x *SCmd) HasStopSound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_StopSound)
	return ok
}

func (x *SCmd) HasUpdateColors() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_UpdateColors)
	return ok
}

func (x *SCmd) HasParticle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Particle)
	return ok
}

func (x *SCmd) HasDamage() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Damage)
	return ok
}

func (x *SCmd) HasSpawnStatic() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SpawnStatic)
	return ok
}

func (x *SCmd) HasSpawnBaseline() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SpawnBaseline)
	return ok
}

func (x *SCmd) HasTempEntity() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_TempEntity)
	return ok
}

func (x *SCmd) HasSetPause() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SetPause)
	return ok
}

func (x *SCmd) HasSignonNum() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SignonNum)
	return ok
}

func (x *SCmd) HasCenterPrint() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_CenterPrint)
	return ok
}

func (x *SCmd) HasKilledMonster() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_KilledMonster)
	return ok
}

func (x *SCmd) HasFoundSecret() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_FoundSecret)
	return ok
}

func (x *SCmd) HasSpawnStaticSound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SpawnStaticSound)
	return ok
}

func (x *SCmd) HasIntermission() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Intermission)
	return ok
}

func (x *SCmd) HasFinale() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Finale)
	return ok
}

func (x *SCmd) HasCdTrack() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_CdTrack)
	return ok
}

func (x *SCmd) HasSellScreen() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_SellScreen)
	return ok
}

func (x *SCmd) HasCutscene() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Cutscene)
	return ok
}

func (x *SCmd) HasSkybox() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Skybox)
	return ok
}

func (x *SCmd) HasBackgroundFlash() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_BackgroundFlash)
	return ok
}

func (x *SCmd) HasFog() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Fog)
	return ok
}

func (x *SCmd) HasAchievement() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Union.(*sCmd_Achievement)
	return ok
}

func (x *SCmd) ClearUnion() {
	x.xxx_hidden_Union = nil
}

func (x *SCmd) ClearDisconnect() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Disconnect); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearEntityUpdate() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_EntityUpdate); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearUpdateStat() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_UpdateStat); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearVersion() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Version); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSetViewEntity() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SetViewEntity); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSound() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Sound); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearTime() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Time); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearPrint() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Print); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearStuffText() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_StuffText); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSetAngle() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SetAngle); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearServerInfo() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_ServerInfo); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearLightStyle() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_LightStyle); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearUpdateName() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_UpdateName); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearUpdateFrags() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_UpdateFrags); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearClientData() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_ClientData); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearStopSound() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_StopSound); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearUpdateColors() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_UpdateColors); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearParticle() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Particle); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearDamage() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Damage); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSpawnStatic() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SpawnStatic); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSpawnBaseline() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SpawnBaseline); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearTempEntity() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_TempEntity); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSetPause() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SetPause); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSignonNum() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SignonNum); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearCenterPrint() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_CenterPrint); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearKilledMonster() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_KilledMonster); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearFoundSecret() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_FoundSecret); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSpawnStaticSound() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SpawnStaticSound); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearIntermission() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Intermission); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearFinale() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Finale); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearCdTrack() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_CdTrack); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSellScreen() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_SellScreen); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearCutscene() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Cutscene); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearSkybox() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Skybox); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearBackgroundFlash() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_BackgroundFlash); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearFog() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Fog); ok {
		x.xxx_hidden_Union = nil
	}
}

func (x *SCmd) ClearAchievement() {
	if _, ok := x.xxx_hidden_Union.(*sCmd_Achievement); ok {
		x.xxx_hidden_Union = nil
	}
}

const SCmd_Union_not_set_case case_SCmd_Union = 0
const SCmd_Disconnect_case case_SCmd_Union = 2
const SCmd_EntityUpdate_case case_SCmd_Union = 45
const SCmd_UpdateStat_case case_SCmd_Union = 3
const SCmd_Version_case case_SCmd_Union = 4
const SCmd_SetViewEntity_case case_SCmd_Union = 5
const SCmd_Sound_case case_SCmd_Union = 6
const SCmd_Time_case case_SCmd_Union = 7
const SCmd_Print_case case_SCmd_Union = 8
const SCmd_StuffText_case case_SCmd_Union = 9
const SCmd_SetAngle_case case_SCmd_Union = 10
const SCmd_ServerInfo_case case_SCmd_Union = 11
const SCmd_LightStyle_case case_SCmd_Union = 12
const SCmd_UpdateName_case case_SCmd_Union = 13
const SCmd_UpdateFrags_case case_SCmd_Union = 14
const SCmd_ClientData_case case_SCmd_Union = 15
const SCmd_StopSound_case case_SCmd_Union = 16
const SCmd_UpdateColors_case case_SCmd_Union = 17
const SCmd_Particle_case case_SCmd_Union = 18
const SCmd_Damage_case case_SCmd_Union = 19
const SCmd_SpawnStatic_case case_SCmd_Union = 20
const SCmd_SpawnBaseline_case case_SCmd_Union = 22
const SCmd_TempEntity_case case_SCmd_Union = 23
const SCmd_SetPause_case case_SCmd_Union = 24
const SCmd_SignonNum_case case_SCmd_Union = 25
const SCmd_CenterPrint_case case_SCmd_Union = 26
const SCmd_KilledMonster_case case_SCmd_Union = 27
const SCmd_FoundSecret_case case_SCmd_Union = 28
const SCmd_SpawnStaticSound_case case_SCmd_Union = 29
const SCmd_Intermission_case case_SCmd_Union = 30
const SCmd_Finale_case case_SCmd_Union = 31
const SCmd_CdTrack_case case_SCmd_Union = 32
const SCmd_SellScreen_case case_SCmd_Union = 33
const SCmd_Cutscene_case case_SCmd_Union = 34
const SCmd_Skybox_case case_SCmd_Union = 37
const SCmd_BackgroundFlash_case case_SCmd_Union = 40
const SCmd_Fog_case case_SCmd_Union = 41
const SCmd_Achievement_case case_SCmd_Union = 42

func (x *SCmd) WhichUnion() case_SCmd_Union {
	if x == nil {
		return SCmd_Union_not_set_case
	}
	switch x.xxx_hidden_Union.(type) {
	case *sCmd_Disconnect:
		return SCmd_Disconnect_case
	case *sCmd_EntityUpdate:
		return SCmd_EntityUpdate_case
	case *sCmd_UpdateStat:
		return SCmd_UpdateStat_case
	case *sCmd_Version:
		return SCmd_Version_case
	case *sCmd_SetViewEntity:
		return SCmd_SetViewEntity_case
	case *sCmd_Sound:
		return SCmd_Sound_case
	case *sCmd_Time:
		return SCmd_Time_case
	case *sCmd_Print:
		return SCmd_Print_case
	case *sCmd_StuffText:
		return SCmd_StuffText_case
	case *sCmd_SetAngle:
		return SCmd_SetAngle_case
	case *sCmd_ServerInfo:
		return SCmd_ServerInfo_case
	case *sCmd_LightStyle:
		return SCmd_LightStyle_case
	case *sCmd_UpdateName:
		return SCmd_UpdateName_case
	case *sCmd_UpdateFrags:
		return SCmd_UpdateFrags_case
	case *sCmd_ClientData:
		return SCmd_ClientData_case
	case *sCmd_StopSound:
		return SCmd_StopSound_case
	case *sCmd_UpdateColors:
		return SCmd_UpdateColors_case
	case *sCmd_Particle:
		return SCmd_Particle_case
	case *sCmd_Damage:
		return SCmd_Damage_case
	case *sCmd_SpawnStatic:
		return SCmd_SpawnStatic_case
	case *sCmd_SpawnBaseline:
		return SCmd_SpawnBaseline_case
	case *sCmd_TempEntity:
		return SCmd_TempEntity_case
	case *sCmd_SetPause:
		return SCmd_SetPause_case
	case *sCmd_SignonNum:
		return SCmd_SignonNum_case
	case *sCmd_CenterPrint:
		return SCmd_CenterPrint_case
	case *sCmd_KilledMonster:
		return SCmd_KilledMonster_case
	case *sCmd_FoundSecret:
		return SCmd_FoundSecret_case
	case *sCmd_SpawnStaticSound:
		return SCmd_SpawnStaticSound_case
	case *sCmd_Intermission:
		return SCmd_Intermission_case
	case *sCmd_Finale:
		return SCmd_Finale_case
	case *sCmd_CdTrack:
		return SCmd_CdTrack_case
	case *sCmd_SellScreen:
		return SCmd_SellScreen_case
	case *sCmd_Cutscene:
		return SCmd_Cutscene_case
	case *sCmd_Skybox:
		return SCmd_Skybox_case
	case *sCmd_BackgroundFlash:
		return SCmd_BackgroundFlash_case
	case *sCmd_Fog:
		return SCmd_Fog_case
	case *sCmd_Achievement:
		return SCmd_Achievement_case
	default:
		return SCmd_Union_not_set_case
	}
}

type SCmd_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Union:
	// Empty nop = 1;
	Disconnect       *bool
	EntityUpdate     *EntityUpdate
	UpdateStat       *UpdateStat
	Version          *int32
	SetViewEntity    *int32
	Sound            *Sound
	Time             *float32
	Print            *string
	StuffText        *string
	SetAngle         *Coord
	ServerInfo       *ServerInfo
	LightStyle       *LightStyle
	UpdateName       *UpdateName
	UpdateFrags      *UpdateFrags
	ClientData       *ClientData
	StopSound        *int32
	UpdateColors     *UpdateColors
	Particle         *Particle
	Damage           *Damage
	SpawnStatic      *Baseline
	SpawnBaseline    *EntityBaseline
	TempEntity       *TempEntity
	SetPause         *bool
	SignonNum        *int32
	CenterPrint      *string
	KilledMonster    *Empty
	FoundSecret      *Empty
	SpawnStaticSound *StaticSound
	Intermission     *Empty
	Finale           *string
	CdTrack          *CDTrack
	SellScreen       *Empty
	Cutscene         *string
	Skybox           *string
	BackgroundFlash  *Empty
	Fog              *Fog
	// EntityBaseline spawn_baseline2 = 42; -- not needed, covered by spawn_baseline
	// Baseline spawn_static2 = 43; -- not needed, covered by spawn_static
	// SpawnStaticSound2 spawn_static_sound2 = 44; -- not needed, covered by spawn_static_sound
	Achievement *string
	// -- end of xxx_hidden_Union
}

func (b0 SCmd_builder) Build() *SCmd {
	m0 := &SCmd{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Disconnect != nil {
		x.xxx_hidden_Union = &sCmd_Disconnect{*b.Disconnect}
	}
	if b.EntityUpdate != nil {
		x.xxx_hidden_Union = &sCmd_EntityUpdate{b.EntityUpdate}
	}
	if b.UpdateStat != nil {
		x.xxx_hidden_Union = &sCmd_UpdateStat{b.UpdateStat}
	}
	if b.Version != nil {
		x.xxx_hidden_Union = &sCmd_Version{*b.Version}
	}
	if b.SetViewEntity != nil {
		x.xxx_hidden_Union = &sCmd_SetViewEntity{*b.SetViewEntity}
	}
	if b.Sound != nil {
		x.xxx_hidden_Union = &sCmd_Sound{b.Sound}
	}
	if b.Time != nil {
		x.xxx_hidden_Union = &sCmd_Time{*b.Time}
	}
	if b.Print != nil {
		x.xxx_hidden_Union = &sCmd_Print{*b.Print}
	}
	if b.StuffText != nil {
		x.xxx_hidden_Union = &sCmd_StuffText{*b.StuffText}
	}
	if b.SetAngle != nil {
		x.xxx_hidden_Union = &sCmd_SetAngle{b.SetAngle}
	}
	if b.ServerInfo != nil {
		x.xxx_hidden_Union = &sCmd_ServerInfo{b.ServerInfo}
	}
	if b.LightStyle != nil {
		x.xxx_hidden_Union = &sCmd_LightStyle{b.LightStyle}
	}
	if b.UpdateName != nil {
		x.xxx_hidden_Union = &sCmd_UpdateName{b.UpdateName}
	}
	if b.UpdateFrags != nil {
		x.xxx_hidden_Union = &sCmd_UpdateFrags{b.UpdateFrags}
	}
	if b.ClientData != nil {
		x.xxx_hidden_Union = &sCmd_ClientData{b.ClientData}
	}
	if b.StopSound != nil {
		x.xxx_hidden_Union = &sCmd_StopSound{*b.StopSound}
	}
	if b.UpdateColors != nil {
		x.xxx_hidden_Union = &sCmd_UpdateColors{b.UpdateColors}
	}
	if b.Particle != nil {
		x.xxx_hidden_Union = &sCmd_Particle{b.Particle}
	}
	if b.Damage != nil {
		x.xxx_hidden_Union = &sCmd_Damage{b.Damage}
	}
	if b.SpawnStatic != nil {
		x.xxx_hidden_Union = &sCmd_SpawnStatic{b.SpawnStatic}
	}
	if b.SpawnBaseline != nil {
		x.xxx_hidden_Union = &sCmd_SpawnBaseline{b.SpawnBaseline}
	}
	if b.TempEntity != nil {
		x.xxx_hidden_Union = &sCmd_TempEntity{b.TempEntity}
	}
	if b.SetPause != nil {
		x.xxx_hidden_Union = &sCmd_SetPause{*b.SetPause}
	}
	if b.SignonNum != nil {
		x.xxx_hidden_Union = &sCmd_SignonNum{*b.SignonNum}
	}
	if b.CenterPrint != nil {
		x.xxx_hidden_Union = &sCmd_CenterPrint{*b.CenterPrint}
	}
	if b.KilledMonster != nil {
		x.xxx_hidden_Union = &sCmd_KilledMonster{b.KilledMonster}
	}
	if b.FoundSecret != nil {
		x.xxx_hidden_Union = &sCmd_FoundSecret{b.FoundSecret}
	}
	if b.SpawnStaticSound != nil {
		x.xxx_hidden_Union = &sCmd_SpawnStaticSound{b.SpawnStaticSound}
	}
	if b.Intermission != nil {
		x.xxx_hidden_Union = &sCmd_Intermission{b.Intermission}
	}
	if b.Finale != nil {
		x.xxx_hidden_Union = &sCmd_Finale{*b.Finale}
	}
	if b.CdTrack != nil {
		x.xxx_hidden_Union = &sCmd_CdTrack{b.CdTrack}
	}
	if b.SellScreen != nil {
		x.xxx_hidden_Union = &sCmd_SellScreen{b.SellScreen}
	}
	if b.Cutscene != nil {
		x.xxx_hidden_Union = &sCmd_Cutscene{*b.Cutscene}
	}
	if b.Skybox != nil {
		x.xxx_hidden_Union = &sCmd_Skybox{*b.Skybox}
	}
	if b.BackgroundFlash != nil {
		x.xxx_hidden_Union = &sCmd_BackgroundFlash{b.BackgroundFlash}
	}
	if b.Fog != nil {
		x.xxx_hidden_Union = &sCmd_Fog{b.Fog}
	}
	if b.Achievement != nil {
		x.xxx_hidden_Union = &sCmd_Achievement{*b.Achievement}
	}
	return m0
}

type case_SCmd_Union protoreflect.FieldNumber

func (x case_SCmd_Union) String() string {
	md := file_server_message_proto_msgTypes[22].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSCmd_Union interface {
	isSCmd_Union()
}

type sCmd_Disconnect struct {
	// Empty nop = 1;
	Disconnect bool `protobuf:"varint,2,opt,name=disconnect,oneof"`
}

type sCmd_EntityUpdate struct {
	EntityUpdate *EntityUpdate `protobuf:"bytes,45,opt,name=entity_update,json=entityUpdate,oneof"`
}

type sCmd_UpdateStat struct {
	UpdateStat *UpdateStat `protobuf:"bytes,3,opt,name=update_stat,json=updateStat,oneof"` // -- int32, int32 (byte + int32)
}

type sCmd_Version struct {
	Version int32 `protobuf:"varint,4,opt,name=version,oneof"`
}

type sCmd_SetViewEntity struct {
	SetViewEntity int32 `protobuf:"varint,5,opt,name=set_view_entity,json=setViewEntity,oneof"` // set_view
}

type sCmd_Sound struct {
	Sound *Sound `protobuf:"bytes,6,opt,name=sound,oneof"`
}

type sCmd_Time struct {
	Time float32 `protobuf:"fixed32,7,opt,name=time,oneof"`
}

type sCmd_Print struct {
	Print string `protobuf:"bytes,8,opt,name=print,oneof"`
}

type sCmd_StuffText struct {
	StuffText string `protobuf:"bytes,9,opt,name=stuff_text,json=stuffText,oneof"`
}

type sCmd_SetAngle struct {
	SetAngle *Coord `protobuf:"bytes,10,opt,name=set_angle,json=setAngle,oneof"`
}

type sCmd_ServerInfo struct {
	ServerInfo *ServerInfo `protobuf:"bytes,11,opt,name=server_info,json=serverInfo,oneof"`
}

type sCmd_LightStyle struct {
	LightStyle *LightStyle `protobuf:"bytes,12,opt,name=light_style,json=lightStyle,oneof"`
}

type sCmd_UpdateName struct {
	UpdateName *UpdateName `protobuf:"bytes,13,opt,name=update_name,json=updateName,oneof"`
}

type sCmd_UpdateFrags struct {
	UpdateFrags *UpdateFrags `protobuf:"bytes,14,opt,name=update_frags,json=updateFrags,oneof"`
}

type sCmd_ClientData struct {
	ClientData *ClientData `protobuf:"bytes,15,opt,name=client_data,json=clientData,oneof"`
}

type sCmd_StopSound struct {
	StopSound int32 `protobuf:"varint,16,opt,name=stop_sound,json=stopSound,oneof"`
}

type sCmd_UpdateColors struct {
	UpdateColors *UpdateColors `protobuf:"bytes,17,opt,name=update_colors,json=updateColors,oneof"`
}

type sCmd_Particle struct {
	Particle *Particle `protobuf:"bytes,18,opt,name=particle,oneof"` // -- Coord, Coord, int32, int32 ([3]float, [3]int8, int8, int8)
}

type sCmd_Damage struct {
	Damage *Damage `protobuf:"bytes,19,opt,name=damage,oneof"`
}

type sCmd_SpawnStatic struct {
	SpawnStatic *Baseline `protobuf:"bytes,20,opt,name=spawn_static,json=spawnStatic,oneof"`
}

type sCmd_SpawnBaseline struct {
	SpawnBaseline *EntityBaseline `protobuf:"bytes,22,opt,name=spawn_baseline,json=spawnBaseline,oneof"`
}

type sCmd_TempEntity struct {
	TempEntity *TempEntity `protobuf:"bytes,23,opt,name=temp_entity,json=tempEntity,oneof"`
}

type sCmd_SetPause struct {
	SetPause bool `protobuf:"varint,24,opt,name=set_pause,json=setPause,oneof"`
}

type sCmd_SignonNum struct {
	SignonNum int32 `protobuf:"varint,25,opt,name=signon_num,json=signonNum,oneof"`
}

type sCmd_CenterPrint struct {
	CenterPrint string `protobuf:"bytes,26,opt,name=center_print,json=centerPrint,oneof"`
}

type sCmd_KilledMonster struct {
	KilledMonster *Empty `protobuf:"bytes,27,opt,name=killed_monster,json=killedMonster,oneof"`
}

type sCmd_FoundSecret struct {
	FoundSecret *Empty `protobuf:"bytes,28,opt,name=found_secret,json=foundSecret,oneof"`
}

type sCmd_SpawnStaticSound struct {
	SpawnStaticSound *StaticSound `protobuf:"bytes,29,opt,name=spawn_static_sound,json=spawnStaticSound,oneof"`
}

type sCmd_Intermission struct {
	Intermission *Empty `protobuf:"bytes,30,opt,name=intermission,oneof"`
}

type sCmd_Finale struct {
	Finale string `protobuf:"bytes,31,opt,name=finale,oneof"`
}

type sCmd_CdTrack struct {
	CdTrack *CDTrack `protobuf:"bytes,32,opt,name=cd_track,json=cdTrack,oneof"` // -- int32, int32 (uint8, uint8)
}

type sCmd_SellScreen struct {
	SellScreen *Empty `protobuf:"bytes,33,opt,name=sell_screen,json=sellScreen,oneof"`
}

type sCmd_Cutscene struct {
	Cutscene string `protobuf:"bytes,34,opt,name=cutscene,oneof"`
}

type sCmd_Skybox struct {
	Skybox string `protobuf:"bytes,37,opt,name=skybox,oneof"`
}

type sCmd_BackgroundFlash struct {
	BackgroundFlash *Empty `protobuf:"bytes,40,opt,name=background_flash,json=backgroundFlash,oneof"`
}

type sCmd_Fog struct {
	Fog *Fog `protobuf:"bytes,41,opt,name=fog,oneof"`
}

type sCmd_Achievement struct {
	// EntityBaseline spawn_baseline2 = 42; -- not needed, covered by spawn_baseline
	// Baseline spawn_static2 = 43; -- not needed, covered by spawn_static
	// SpawnStaticSound2 spawn_static_sound2 = 44; -- not needed, covered by spawn_static_sound
	Achievement string `protobuf:"bytes,42,opt,name=achievement,oneof"`
}

func (*sCmd_Disconnect) isSCmd_Union() {}

func (*sCmd_EntityUpdate) isSCmd_Union() {}

func (*sCmd_UpdateStat) isSCmd_Union() {}

func (*sCmd_Version) isSCmd_Union() {}

func (*sCmd_SetViewEntity) isSCmd_Union() {}

func (*sCmd_Sound) isSCmd_Union() {}

func (*sCmd_Time) isSCmd_Union() {}

func (*sCmd_Print) isSCmd_Union() {}

func (*sCmd_StuffText) isSCmd_Union() {}

func (*sCmd_SetAngle) isSCmd_Union() {}

func (*sCmd_ServerInfo) isSCmd_Union() {}

func (*sCmd_LightStyle) isSCmd_Union() {}

func (*sCmd_UpdateName) isSCmd_Union() {}

func (*sCmd_UpdateFrags) isSCmd_Union() {}

func (*sCmd_ClientData) isSCmd_Union() {}

func (*sCmd_StopSound) isSCmd_Union() {}

func (*sCmd_UpdateColors) isSCmd_Union() {}

func (*sCmd_Particle) isSCmd_Union() {}

func (*sCmd_Damage) isSCmd_Union() {}

func (*sCmd_SpawnStatic) isSCmd_Union() {}

func (*sCmd_SpawnBaseline) isSCmd_Union() {}

func (*sCmd_TempEntity) isSCmd_Union() {}

func (*sCmd_SetPause) isSCmd_Union() {}

func (*sCmd_SignonNum) isSCmd_Union() {}

func (*sCmd_CenterPrint) isSCmd_Union() {}

func (*sCmd_KilledMonster) isSCmd_Union() {}

func (*sCmd_FoundSecret) isSCmd_Union() {}

func (*sCmd_SpawnStaticSound) isSCmd_Union() {}

func (*sCmd_Intermission) isSCmd_Union() {}

func (*sCmd_Finale) isSCmd_Union() {}

func (*sCmd_CdTrack) isSCmd_Union() {}

func (*sCmd_SellScreen) isSCmd_Union() {}

func (*sCmd_Cutscene) isSCmd_Union() {}

func (*sCmd_Skybox) isSCmd_Union() {}

func (*sCmd_BackgroundFlash) isSCmd_Union() {}

func (*sCmd_Fog) isSCmd_Union() {}

func (*sCmd_Achievement) isSCmd_Union() {}

type ServerMessage struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Cmds *[]*SCmd               `protobuf:"bytes,1,rep,name=cmds" json:"cmds,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	mi := &file_server_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ServerMessage) GetCmds() []*SCmd {
	if x != nil {
		if x.xxx_hidden_Cmds != nil {
			return *x.xxx_hidden_Cmds
		}
	}
	return nil
}

func (x *ServerMessage) SetCmds(v []*SCmd) {
	x.xxx_hidden_Cmds = &v
}

type ServerMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Cmds []*SCmd
}

func (b0 ServerMessage_builder) Build() *ServerMessage {
	m0 := &ServerMessage{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cmds = &b.Cmds
	return m0
}

var File_server_message_proto protoreflect.FileDescriptor

var file_server_message_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x21,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x7a, 0x22, 0x34, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x22, 0x64, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x22, 0x77, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x29,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0xa9, 0x05, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x67, 0x75,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x67, 0x75,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61,
	0x72, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x2c, 0x0a, 0x09, 0x77, 0x69,
	0x7a, 0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x77, 0x69, 0x7a, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x6b, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x0a,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x30, 0x0a, 0x0b,
	0x6c, 0x61, 0x76, 0x61, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x76, 0x61, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x2b,
	0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x65, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x62, 0x65, 0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x3b,
	0x0a, 0x0a, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x05,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x22, 0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x46, 0x72, 0x61, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xa7, 0x04,
	0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0b,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x61, 0x6c,
	0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x70, 0x75,
	0x6e, 0x63, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x6d, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x6d, 0x6d,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x22, 0x54, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x22, 0xea, 0x03, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x65, 0x72, 0x70, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x72, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x1b, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0xaa,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05,
	0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12,
	0x19, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0xaa,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x58, 0x12, 0x20, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x59, 0x12, 0x20, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5a, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xaa, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x58, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xaa, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x59, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xaa, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5a, 0x12, 0x26, 0x0a, 0x0b, 0x6c, 0x65,
	0x72, 0x70, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x6c, 0x65, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22,
	0x84, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x25, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x06, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x07, 0x43, 0x44, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x22, 0x36, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x08, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x2b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x03, 0x46, 0x6f, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x0d, 0x0a, 0x04, 0x53,
	0x43, 0x6d, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x75, 0x66,
	0x66, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61,
	0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x70, 0x61,
	0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x23, 0x0a, 0x0c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x0c, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x43, 0x0a, 0x12, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x44, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x63, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x74, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x6b, 0x79, 0x62, 0x6f, 0x78, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6b, 0x79, 0x62, 0x6f, 0x78, 0x12, 0x3a, 0x0a,
	0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x03, 0x66, 0x6f, 0x67,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x46, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x03, 0x66, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x0b, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6d, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x42, 0x33, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x72, 0x6a, 0x61, 0x6b,
	0x2f, 0x67, 0x6f, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x92,
	0x03, 0x0d, 0xd2, 0x3e, 0x02, 0x10, 0x02, 0x08, 0x02, 0x10, 0x01, 0x20, 0x02, 0x30, 0x01, 0x62,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var file_server_message_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_server_message_proto_goTypes = []any{
	(*Coord)(nil),          // 0: protos.Coord
	(*IntCoord)(nil),       // 1: protos.IntCoord
	(*Line)(nil),           // 2: protos.Line
	(*Explosion2)(nil),     // 3: protos.Explosion2
	(*Empty)(nil),          // 4: protos.Empty
	(*TempEntity)(nil),     // 5: protos.TempEntity
	(*LightStyle)(nil),     // 6: protos.LightStyle
	(*Sound)(nil),          // 7: protos.Sound
	(*UpdateName)(nil),     // 8: protos.UpdateName
	(*UpdateFrags)(nil),    // 9: protos.UpdateFrags
	(*UpdateColors)(nil),   // 10: protos.UpdateColors
	(*ClientData)(nil),     // 11: protos.ClientData
	(*Baseline)(nil),       // 12: protos.Baseline
	(*EntityBaseline)(nil), // 13: protos.EntityBaseline
	(*ServerInfo)(nil),     // 14: protos.ServerInfo
	(*EntityUpdate)(nil),   // 15: protos.EntityUpdate
	(*StaticSound)(nil),    // 16: protos.StaticSound
	(*Damage)(nil),         // 17: protos.Damage
	(*CDTrack)(nil),        // 18: protos.CDTrack
	(*UpdateStat)(nil),     // 19: protos.UpdateStat
	(*Particle)(nil),       // 20: protos.Particle
	(*Fog)(nil),            // 21: protos.Fog
	(*SCmd)(nil),           // 22: protos.SCmd
	(*ServerMessage)(nil),  // 23: protos.ServerMessage
}
var file_server_message_proto_depIdxs = []int32{
	0,  // 0: protos.Line.start:type_name -> protos.Coord
	0,  // 1: protos.Line.end:type_name -> protos.Coord
	0,  // 2: protos.Explosion2.position:type_name -> protos.Coord
	0,  // 3: protos.TempEntity.spike:type_name -> protos.Coord
	0,  // 4: protos.TempEntity.super_spike:type_name -> protos.Coord
	0,  // 5: protos.TempEntity.gunshot:type_name -> protos.Coord
	0,  // 6: protos.TempEntity.explosion:type_name -> protos.Coord
	0,  // 7: protos.TempEntity.tar_explosion:type_name -> protos.Coord
	2,  // 8: protos.TempEntity.lightning1:type_name -> protos.Line
	2,  // 9: protos.TempEntity.lightning2:type_name -> protos.Line
	0,  // 10: protos.TempEntity.wiz_spike:type_name -> protos.Coord
	0,  // 11: protos.TempEntity.knight_spike:type_name -> protos.Coord
	2,  // 12: protos.TempEntity.lightning3:type_name -> protos.Line
	0,  // 13: protos.TempEntity.lava_splash:type_name -> protos.Coord
	0,  // 14: protos.TempEntity.teleport:type_name -> protos.Coord
	3,  // 15: protos.TempEntity.explosion2:type_name -> protos.Explosion2
	2,  // 16: protos.TempEntity.beam:type_name -> protos.Line
	0,  // 17: protos.Sound.origin:type_name -> protos.Coord
	1,  // 18: protos.ClientData.punch_angle:type_name -> protos.IntCoord
	1,  // 19: protos.ClientData.velocity:type_name -> protos.IntCoord
	0,  // 20: protos.Baseline.origin:type_name -> protos.Coord
	0,  // 21: protos.Baseline.angles:type_name -> protos.Coord
	12, // 22: protos.EntityBaseline.baseline:type_name -> protos.Baseline
	0,  // 23: protos.StaticSound.origin:type_name -> protos.Coord
	0,  // 24: protos.Damage.position:type_name -> protos.Coord
	0,  // 25: protos.Particle.origin:type_name -> protos.Coord
	0,  // 26: protos.Particle.direction:type_name -> protos.Coord
	15, // 27: protos.SCmd.entity_update:type_name -> protos.EntityUpdate
	19, // 28: protos.SCmd.update_stat:type_name -> protos.UpdateStat
	7,  // 29: protos.SCmd.sound:type_name -> protos.Sound
	0,  // 30: protos.SCmd.set_angle:type_name -> protos.Coord
	14, // 31: protos.SCmd.server_info:type_name -> protos.ServerInfo
	6,  // 32: protos.SCmd.light_style:type_name -> protos.LightStyle
	8,  // 33: protos.SCmd.update_name:type_name -> protos.UpdateName
	9,  // 34: protos.SCmd.update_frags:type_name -> protos.UpdateFrags
	11, // 35: protos.SCmd.client_data:type_name -> protos.ClientData
	10, // 36: protos.SCmd.update_colors:type_name -> protos.UpdateColors
	20, // 37: protos.SCmd.particle:type_name -> protos.Particle
	17, // 38: protos.SCmd.damage:type_name -> protos.Damage
	12, // 39: protos.SCmd.spawn_static:type_name -> protos.Baseline
	13, // 40: protos.SCmd.spawn_baseline:type_name -> protos.EntityBaseline
	5,  // 41: protos.SCmd.temp_entity:type_name -> protos.TempEntity
	4,  // 42: protos.SCmd.killed_monster:type_name -> protos.Empty
	4,  // 43: protos.SCmd.found_secret:type_name -> protos.Empty
	16, // 44: protos.SCmd.spawn_static_sound:type_name -> protos.StaticSound
	4,  // 45: protos.SCmd.intermission:type_name -> protos.Empty
	18, // 46: protos.SCmd.cd_track:type_name -> protos.CDTrack
	4,  // 47: protos.SCmd.sell_screen:type_name -> protos.Empty
	4,  // 48: protos.SCmd.background_flash:type_name -> protos.Empty
	21, // 49: protos.SCmd.fog:type_name -> protos.Fog
	22, // 50: protos.ServerMessage.cmds:type_name -> protos.SCmd
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_server_message_proto_init() }
func file_server_message_proto_init() {
	if File_server_message_proto != nil {
		return
	}
	file_server_message_proto_msgTypes[5].OneofWrappers = []any{
		(*tempEntity_Spike)(nil),
		(*tempEntity_SuperSpike)(nil),
		(*tempEntity_Gunshot)(nil),
		(*tempEntity_Explosion)(nil),
		(*tempEntity_TarExplosion)(nil),
		(*tempEntity_Lightning1)(nil),
		(*tempEntity_Lightning2)(nil),
		(*tempEntity_WizSpike)(nil),
		(*tempEntity_KnightSpike)(nil),
		(*tempEntity_Lightning3)(nil),
		(*tempEntity_LavaSplash)(nil),
		(*tempEntity_Teleport)(nil),
		(*tempEntity_Explosion2)(nil),
		(*tempEntity_Beam)(nil),
	}
	file_server_message_proto_msgTypes[22].OneofWrappers = []any{
		(*sCmd_Disconnect)(nil),
		(*sCmd_EntityUpdate)(nil),
		(*sCmd_UpdateStat)(nil),
		(*sCmd_Version)(nil),
		(*sCmd_SetViewEntity)(nil),
		(*sCmd_Sound)(nil),
		(*sCmd_Time)(nil),
		(*sCmd_Print)(nil),
		(*sCmd_StuffText)(nil),
		(*sCmd_SetAngle)(nil),
		(*sCmd_ServerInfo)(nil),
		(*sCmd_LightStyle)(nil),
		(*sCmd_UpdateName)(nil),
		(*sCmd_UpdateFrags)(nil),
		(*sCmd_ClientData)(nil),
		(*sCmd_StopSound)(nil),
		(*sCmd_UpdateColors)(nil),
		(*sCmd_Particle)(nil),
		(*sCmd_Damage)(nil),
		(*sCmd_SpawnStatic)(nil),
		(*sCmd_SpawnBaseline)(nil),
		(*sCmd_TempEntity)(nil),
		(*sCmd_SetPause)(nil),
		(*sCmd_SignonNum)(nil),
		(*sCmd_CenterPrint)(nil),
		(*sCmd_KilledMonster)(nil),
		(*sCmd_FoundSecret)(nil),
		(*sCmd_SpawnStaticSound)(nil),
		(*sCmd_Intermission)(nil),
		(*sCmd_Finale)(nil),
		(*sCmd_CdTrack)(nil),
		(*sCmd_SellScreen)(nil),
		(*sCmd_Cutscene)(nil),
		(*sCmd_Skybox)(nil),
		(*sCmd_BackgroundFlash)(nil),
		(*sCmd_Fog)(nil),
		(*sCmd_Achievement)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_message_proto_goTypes,
		DependencyIndexes: file_server_message_proto_depIdxs,
		MessageInfos:      file_server_message_proto_msgTypes,
	}.Build()
	File_server_message_proto = out.File
	file_server_message_proto_rawDesc = nil
	file_server_message_proto_goTypes = nil
	file_server_message_proto_depIdxs = nil
}
